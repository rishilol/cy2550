[4mGPG[24m(1)                       GNU Privacy Guard 2.4                      [4mGPG[24m(1)

[1mNAME[0m
       [1mgpg [22m- OpenPGP encryption and signing tool

[1mSYNOPSIS[0m
       [1mgpg [22m[[1m--homedir [4m[22mdir[24m] [[1m--options [4m[22mfile[24m] [[4moptions[24m] [4mcommand[24m [[4margs[24m]

[1mDESCRIPTION[0m
       [1mgpg  [22mis the OpenPGP part of the GNU Privacy Guard (GnuPG). It is a tool
       to provide digital encryption and signing services  using  the  OpenPGP
       standard.  [1mgpg  [22mfeatures  complete key management and all the bells and
       whistles you would expect from a full OpenPGP implementation.

       There are two main versions of GnuPG: GnuPG 1.x and GnuPG  2.x.   GnuPG
       2.x  supports modern encryption algorithms and thus should be preferred
       over GnuPG 1.x.  You only need  to  use  GnuPG  1.x  if  your  platform
       doesn't  support  GnuPG 2.x, or you need support for some features that
       GnuPG 2.x has deprecated, e.g.,  decrypting  data  created  with  PGP-2
       keys.

       If  you  are  looking for version 1 of GnuPG, you may find that version
       installed under the name [1mgpg1[22m.

[1mRETURN VALUE[0m
       The program returns 0 if there are no severe errors, 1 if  at  least  a
       signature was bad, and other error codes for fatal errors.

       Note  that  signature verification requires exact knowledge of what has
       been signed and by whom it has been signed.  Using only the return code
       is thus not an appropriate way to verify a signature by a script.   Ei‚Äê
       ther make proper use or the status codes or use the [1mgpgv [22mtool which has
       been designed to make signature verification easy for scripts.

[1mWARNINGS[0m
       Use  a good password for your user account and make sure that all secu‚Äê
       rity issues are always fixed on your  machine.   Also  employ  diligent
       physical protection to your machine.  Consider to use a good passphrase
       as a last resort protection to your secret key in the case your machine
       gets  stolen.   It  is  important that your secret key is never leaked.
       Using an easy to carry around token or smartcard with the secret key is
       often a advisable.

       If you are going to verify detached signatures, make sure that the pro‚Äê
       gram knows about it; either give both filenames on the command line  or
       use ‚Äò-‚Äô to specify STDIN.

       For  scripted  or  other unattended use of [1mgpg [22mmake sure to use the ma‚Äê
       chine-parseable interface and not the default interface  which  is  in‚Äê
       tended  for direct use by humans.  The machine-parseable interface pro‚Äê
       vides a stable and well documented API independent of the locale or fu‚Äê
       ture changes of [1mgpg[22m.  To enable this interface use the options  [1m--with-[0m
       [1mcolons [22mand [1m--status-fd[22m.  For certain operations the option [1m--command-fd[0m
       may  come  handy too.  See this man page and the file ‚Äò[4mDETAILS[24m‚Äô for the
       specification of the interface.  Note that the GnuPG ``info'' pages  as
       well as the PDF version of the GnuPG manual features a chapter on unat‚Äê
       tended  use  of GnuPG.  As an alternative the library [1mGPGME [22mcan be used
       as a high-level abstraction on top of that interface.

[1mINTEROPERABILITY[0m
       GnuPG tries to be a very flexible implementation of the  OpenPGP  stan‚Äê
       dard. In particular, GnuPG implements many of the optional parts of the
       standard,  such as the SHA-512 hash, and the ZLIB and BZIP2 compression
       algorithms. It is important to be aware that not all  OpenPGP  programs
       implement  these  optional algorithms and that by forcing their use via
       the [1m--cipher-algo[22m, [1m--digest-algo[22m,  [1m--cert-digest-algo[22m,  or  [1m--compress-[0m
       [1malgo  [22moptions  in  GnuPG,  it  is  possible to create a perfectly valid
       OpenPGP message, but one that cannot be read by the intended recipient.

       There are dozens of variations of OpenPGP programs available, and  each
       supports a slightly different subset of these optional algorithms.  For
       example,  until  recently,  no  (unhacked) version of PGP supported the
       BLOWFISH cipher algorithm. A message using BLOWFISH simply could not be
       read by a PGP user. By default, GnuPG uses the standard OpenPGP prefer‚Äê
       ences system that will always do the right thing  and  create  messages
       that  are usable by all recipients, regardless of which OpenPGP program
       they use. Only override this safe default if you really know  what  you
       are doing.

       If you absolutely must override the safe default, or if the preferences
       on  a given key are invalid for some reason, you are far better off us‚Äê
       ing the [1m--pgp6[22m, [1m--pgp7[22m, or [1m--pgp8 [22moptions. These options  are  safe  as
       they  do  not  force any particular algorithms in violation of OpenPGP,
       but rather reduce the available algorithms to a "PGP-safe" list.

[1mCOMMANDS[0m
       Commands are not distinguished from options except for  the  fact  that
       only  one  command  is allowed.  Generally speaking, irrelevant options
       are silently ignored, and may not be checked for correctness.

       [1mgpg [22mmay be run with no commands. In this case it will print  a  warning
       perform  a  reasonable action depending on the type of file it is given
       as input (an encrypted message is decrypted, a signature is verified, a
       file containing keys is listed, etc.).

       If you run into any problems, please add the option  [1m--verbose  [22mto  the
       invocation to see more diagnostics.

   [1mCommands not specific to the function[0m

       [1m--version[0m
              Print  the program version and licensing information.  Note that
              you cannot abbreviate this command.

       [1m--help[0m
       [1m-h     [22mPrint a usage message summarizing the most  useful  command-line
              options.   Note that you cannot arbitrarily abbreviate this com‚Äê
              mand (though you can use its short form [1m-h[22m).

       [1m--warranty[0m
              Print warranty information.

       [1m--dump-options[0m
              Print a list of all available options and commands.   Note  that
              you cannot abbreviate this command.

   [1mCommands to select the type of operation[0m

       [1m--sign[0m
       [1m-s     [22mSign  a message. This command may be combined with [1m--encrypt [22m(to
              sign and encrypt a message), [1m--symmetric [22m(to sign and  symmetri‚Äê
              cally  encrypt a message), or both [1m--encrypt [22mand [1m--symmetric [22m(to
              sign and encrypt a message that can be decrypted using a  secret
              key  or  a passphrase).  The signing key is chosen by default or
              can be set explicitly using the [1m--local-user  [22mand  [1m--default-key[0m
              options.

       [1m--clear-sign[0m
       [1m--clearsign[0m
              Make  a  cleartext signature.  The content in a cleartext signa‚Äê
              ture is readable without any special software. OpenPGP  software
              is  only  needed  to verify the signature.  cleartext signatures
              may modify end-of-line whitespace for platform independence  and
              are not intended to be reversible.  The signing key is chosen by
              default  or  can  be  set  explicitly using the [1m--local-user [22mand
              [1m--default-key [22moptions.

       [1m--detach-sign[0m
       [1m-b     [22mMake a detached signature.

       [1m--encrypt[0m
       [1m-e     [22mEncrypt data to one or more public keys.  This  command  may  be
              combined  with [1m--sign [22m(to sign and encrypt a message), [1m--symmet‚Äê[0m
              [1mric [22m(to encrypt a message that can be decrypted using  a  secret
              key  or a passphrase), or [1m--sign [22mand [1m--symmetric [22mtogether (for a
              signed message that can be decrypted using a  secret  key  or  a
              passphrase).  [1m--recipient [22mand related options specify which pub‚Äê
              lic keys to use for encryption.

       [1m--symmetric[0m
       [1m-c     [22mEncrypt  with a symmetric cipher using a passphrase. The default
              symmetric cipher used is AES-128, but may  be  chosen  with  the
              [1m--cipher-algo  [22moption.  This command may be combined with [1m--sign[0m
              (for a signed and symmetrically  encrypted  message),  [1m--encrypt[0m
              (for  a  message  that  may  be  decrypted via a secret key or a
              passphrase), or [1m--sign [22mand [1m--encrypt [22mtogether (for a signed mes‚Äê
              sage that may be decrypted via a secret key  or  a  passphrase).
              [1mgpg  [22mcaches the passphrase used for symmetric encryption so that
              a decrypt operation may not require that the user needs to enter
              the passphrase.  The option [1m--no-symkey-cache  [22mcan  be  used  to
              disable this feature.

       [1m--store[0m
              Store only (make a simple literal data packet).

       [1m--decrypt[0m
       [1m-d     [22mDecrypt  the file given on the command line (or STDIN if no file
              is specified) and write it to STDOUT (or the file specified with
              [1m--output[22m). If the decrypted file is  signed,  the  signature  is
              also  verified. This command differs from the default operation,
              as it never writes to the filename which is included in the file
              and it rejects files that don't begin with an encrypted message.

       [1m--verify[0m
              Assume that the first argument is a signed file  and  verify  it
              without generating any output.  With no arguments, the signature
              packet  is  read from STDIN.  If only one argument is given, the
              specified file is expected to include a complete signature.

              With more than one argument, the first argument should specify a
              file with a detached signature and the  remaining  files  should
              contain the signed data. To read the signed data from STDIN, use
              ‚Äò-‚Äô  as  the  second filename.  For security reasons, a detached
              signature will not read the signed material from  STDIN  if  not
              explicitly specified.

              Note:  If  the option [1m--batch [22mis not used, [1mgpg [22mmay assume that a
              single argument is a file with a detached signature, and it will
              try to find a matching data file by stripping certain  suffixes.
              Using  this historical feature to verify a detached signature is
              strongly discouraged; you should always specify  the  data  file
              explicitly.

              Note:  When  verifying  a cleartext signature, [1mgpg [22mverifies only
              what makes up the cleartext signed data and not any  extra  data
              outside  of the cleartext signature or the header lines directly
              following the dash marker line.  The option [1m--output [22mmay be used
              to write out the actual signed data, but there  are  other  pit‚Äê
              falls with this format as well.  It is suggested to avoid clear‚Äê
              text signatures in favor of detached signatures.

              Note:  To  check  whether a file was signed by a certain key the
              option [1m--assert-signer [22mcan be used.  As an alternative the  [1mgpgv[0m
              tool  can  be  used.   [1mgpgv  [22mis  designed to compare signed data
              against a list of trusted keys and returns with success only for
              a good signature.  It has its own manual page.

       [1m--multifile[0m
              This modifies certain other commands to  accept  multiple  files
              for  processing on the command line or read from STDIN with each
              filename on a separate line. This allows for many  files  to  be
              processed  at once. [1m--multifile [22mmay currently be used along with
              [1m--verify[22m, [1m--encrypt[22m, and [1m--decrypt[22m. Note that [1m--multifile --ver‚Äê[0m
              [1mify [22mmay not be used with detached signatures.

       [1m--verify-files[0m
              Identical to [1m--multifile --verify[22m.

       [1m--encrypt-files[0m
              Identical to [1m--multifile --encrypt[22m.

       [1m--decrypt-files[0m
              Identical to [1m--multifile --decrypt[22m.

       [1m--list-keys[0m
       [1m-k[0m
       [1m--list-public-keys[0m
              List the specified keys.  If no keys  are  specified,  then  all
              keys from the configured public keyrings are listed.

              Never  use  the  output of this command in scripts or other pro‚Äê
              grams.  The output is intended only for humans and its format is
              likely to change.  The [1m--with-colons [22moption emits the output  in
              a stable, machine-parseable format, which is intended for use by
              scripts and other programs.

       [1m--list-secret-keys[0m
       [1m-K     [22mList  the specified secret keys.  If no keys are specified, then
              all known secret keys are listed.  A [1m# [22mafter  the  initial  tags
              [1msec  [22mor [1mssb [22mmeans that the secret key or subkey is currently not
              usable.  We also say that this key has been taken  offline  (for
              example, a primary key can be taken offline by exporting the key
              using  the  command  [1m--export-secret-subkeys[22m).   A [1m> [22mafter these
              tags indicate that the key is stored on a smartcard.   See  also
              [1m--list-keys[22m.

       [1m--check-signatures[0m
       [1m--check-sigs[0m
              Same  as  [1m--list-keys[22m,  but  the key signatures are verified and
              listed too.  Note that for performance  reasons  the  revocation
              status of a signing key is not shown.  This command has the same
              effect as using [1m--list-keys [22mwith [1m--with-sig-check[22m.

              The  status  of the verification is indicated by a flag directly
              following the "sig" tag (and thus before the flags described be‚Äê
              low.  A "!" indicates that the signature has  been  successfully
              verified,  a "-" denotes a bad signature and a "%" is used if an
              error occurred while checking the signature  (e.g.  a  non  sup‚Äê
              ported  algorithm).   Signatures  where  the  public  key is not
              available are not  listed;  to  see  their  keyids  the  command
              [1m--list-sigs [22mcan be used.

              For  each  signature  listed, there are several flags in between
              the signature status flag and keyid.   These  flags  give  addi‚Äê
              tional  information  about  each  key  signature.   From left to
              right, they are the numbers 1-3 for certificate check level (see
              [1m--ask-cert-level[22m), "L" for a local or  non-exportable  signature
              (see  [1m--lsign-key[22m),  "R"  for  a nonRevocable signature (see the
              [1m--edit-key [22mcommand "nrsign"), "P" for a signature that  contains
              a  policy  URL (see [1m--cert-policy-url[22m), "N" for a signature that
              contains a notation (see [1m--cert-notation[22m), "X"  for  an  eXpired
              signature  (see  [1m--ask-cert-expire[22m),  and the numbers 1-9 or "T"
              for 10 and above to indicate trust  signature  levels  (see  the
              [1m--edit-key [22mcommand "tsign").

       [1m--locate-keys[0m
       [1m--locate-external-keys[0m
              Locate the keys given as arguments.  This command basically uses
              the same algorithm as used when locating keys for encryption and
              may  thus be used to see what keys [1mgpg [22mmight use.  In particular
              external methods as defined by [1m--auto-key-locate [22mare used to lo‚Äê
              cate a key if the arguments comain valid mail  addresses.   Only
              public keys are listed.

              The  variant  [1m--locate-external-keys [22mdoes not consider a locally
              existing key and can thus be used to force the refresh of a  key
              via the defined external methods.  If a fingerprint is given and
              and   the  methods  defined  by  --auto-key-locate  define  LDAP
              servers, the key is fetched from these resources;  defined  non-
              LDAP keyservers are skipped.

       [1m--show-keys[0m
              This commands takes OpenPGP keys as input and prints information
              about  them in the same way the command [1m--list-keys [22mdoes for lo‚Äê
              cally stored key.  In addition the list  options  [1mshow-unusable-[0m
              [1muids[22m, [1mshow-unusable-subkeys[22m, [1mshow-notations [22mand [1mshow-policy-urls[0m
              are  also enabled.  As usual for automated processing, this com‚Äê
              mand should be combined with the option [1m--with-colons[22m.

       [1m--fingerprint[0m
              List all keys (or the specified ones) along with  their  finger‚Äê
              prints.  This is the same output as [1m--list-keys [22mbut with the ad‚Äê
              ditional output of a line with the fingerprint. May also be com‚Äê
              bined with [1m--check-signatures[22m.  If this command is given  twice,
              the  fingerprints  of  all  secondary keys are listed too.  This
              command also forces pretty printing of fingerprints if the keyid
              format has been set to "none".

       [1m--list-packets[0m
              List only the sequence of packets.  This command is only  useful
              for  debugging.   When used with option [1m--verbose [22mthe actual MPI
              values are dumped and not only their  lengths.   Note  that  the
              output of this command may change with new releases.

       [1m--edit-card[0m
       [1m--card-edit[0m
              Present  a  menu to work with a smartcard. The subcommand "help"
              provides an overview on available commands. For a  detailed  de‚Äê
              scription,  please see the Card HOWTO at https://gnupg.org/docu‚Äê
              mentation/howtos.html#GnuPG-cardHOWTO .  Please  note  that  the
              command  "openpgp" can be used to switch to the OpenPGP applica‚Äê
              tion of cards which by default are presenting  another  applica‚Äê
              tion (e.g. PIV).

       [1m--card-status[0m
              Show the content of the smart card.

       [1m--change-pin[0m
              Present  a  menu  to allow changing the PIN of a smartcard. This
              functionality is also available as the subcommand "passwd"  with
              the [1m--edit-card [22mcommand.

       [1m--delete-keys [4m[22mname[0m
              Remove  key  from the public keyring. In batch mode either [1m--yes[0m
              is required or the key must be specified by fingerprint. This is
              a safeguard against accidental deletion of  multiple  keys.   If
              the  exclamation  mark  syntax is used with the fingerprint of a
              subkey only that subkey is deleted; if the exclamation  mark  is
              used  with  the fingerprint of the primary key the entire public
              key is deleted.

       [1m--delete-secret-keys [4m[22mname[0m
              Remove key from the secret keyring. In batch mode the  key  must
              be  specified  by  fingerprint.  The option [1m--yes [22mcan be used to
              advise gpg-agent not to request a confirmation.  This extra pre-
              caution is done because [1mgpg [22mcan't be sure that  the  secret  key
              (as  controlled by gpg-agent) is only used for the given OpenPGP
              public key.  If the exclamation mark syntax  is  used  with  the
              fingerprint  of  a subkey only the secret part of that subkey is
              deleted; if the exclamation mark is used with the fingerprint of
              the primary key only the secret  part  of  the  primary  key  is
              deleted.

       [1m--delete-secret-and-public-key [4m[22mname[0m
              Same as [1m--delete-key[22m, but if a secret key exists, it will be re‚Äê
              moved  first. In batch mode the key must be specified by finger‚Äê
              print.  The option [1m--yes [22mcan be used to advise gpg-agent not  to
              request a confirmation.

       [1m--export[0m
              Either  export  all  keys from all keyrings (default keyring and
              those registered via option [1m--keyring[22m), or if at least one  name
              is given, those of the given name. The exported keys are written
              to  STDOUT  or  to the file given with option [1m--output[22m.  Use to‚Äê
              gether with [1m--armor [22mto mail those keys.

       [1m--send-keys [4m[22mkeyIDs[0m
              Similar to [1m--export [22mbut sends the keys to a keyserver.   Finger‚Äê
              prints may be used instead of key IDs.  Don't send your complete
              keyring  to a keyserver --- select only those keys which are new
              or changed by you.  If no [4mkeyIDs[24m are given, [1mgpg [22mdoes nothing.

              Take care: Keyservers are by design write only systems and  thus
              it  is not possible to ever delete keys once they have been send
              to a keyserver.

       [1m--export-secret-keys[0m
       [1m--export-secret-subkeys[0m
              Same as [1m--export[22m, but exports the secret keys instead.  The  ex‚Äê
              ported  keys are written to STDOUT or to the file given with op‚Äê
              tion [1m--output[22m.  This command is often used along with the option
              [1m--armor [22mto allow for easy printing of the key for paper  backup;
              however the external tool [1mpaperkey [22mdoes a better job of creating
              backups on paper.  Note that exporting a secret key can be a se‚Äê
              curity risk if the exported keys are sent over an insecure chan‚Äê
              nel.

              The  second form of the command has the special property to ren‚Äê
              der the secret part of the primary key useless; this  is  a  GNU
              extension  to  OpenPGP  and other implementations can not be ex‚Äê
              pected to successfully import such a key.  Its intended  use  is
              in  generating a full key with an additional signing subkey on a
              dedicated machine.  This command then exports  the  key  without
              the primary key to the main machine.

              GnuPG  may ask you to enter the passphrase for the key.  This is
              required, because the internal protection method of  the  secret
              key is different from the one specified by the OpenPGP protocol.

       [1m--export-ssh-key[0m
              This  command  is used to export a key in the OpenSSH public key
              format.  It requires the specification of one key by  the  usual
              means and exports the latest valid subkey which has an authenti‚Äê
              cation  capability  to  STDOUT  or to the file given with option
              [1m--output[22m.  That output can directly be added  to  ssh's  ‚Äò[4mautho‚Äê[0m
              [4mrized_key[24m‚Äô file.

              By  specifying the key to export using a key ID or a fingerprint
              suffixed with an exclamation mark (!), a specific subkey or  the
              primary  key  can  be exported.  This does not even require that
              the key has the authentication capability flag set.

       [1m--import[0m
       [1m--fast-import[0m
              Import/merge keys. This adds the given keys to the keyring.  The
              fast version is currently just a synonym.

              There  are  a  few  other options which control how this command
              works.  Most notable here is the [1m--import-options merge-only [22mop‚Äê
              tion which does not insert new keys but does only the merging of
              new signatures, user-IDs and subkeys.

       [1m--receive-keys [4m[22mkeyIDs[0m
       [1m--recv-keys [4m[22mkeyIDs[0m
              Import the keys with the given [4mkeyIDs[24m from a keyserver.

       [1m--refresh-keys[0m
              Request updates from a keyserver for keys that already exist  on
              the  local  keyring.  This is useful for updating a key with the
              latest signatures, user IDs, etc. Calling this with no arguments
              will refresh the entire keyring.

       [1m--search-keys [4m[22mnames[0m
              Search the keyserver for the given [4mnames[24m. Multiple  names  given
              here will be joined together to create the search string for the
              keyserver.  Note that keyservers search for [4mnames[24m in a different
              and simpler way than gpg does.  The best choice is to use a mail
              address.   Due  to  data privacy reasons keyservers may even not
              even allow searching by user id or mail  address  and  thus  may
              only  return results when being used with the [1m--recv-key [22mcommand
              to search by key fingerprint or keyid.

       [1m--fetch-keys [4m[22mURIs[0m
              Retrieve keys located at the specified [4mURIs[24m. Note that different
              installations of GnuPG may support  different  protocols  (HTTP,
              FTP,  LDAP,  etc.).   When  using HTTPS the system provided root
              certificates are used by this command.

       [1m--update-trustdb[0m
              Do trust database maintenance. This command  iterates  over  all
              keys and builds the Web of Trust. This is an interactive command
              because it may have to ask for the "ownertrust" values for keys.
              The  user  has  to  give an estimation of how far she trusts the
              owner of the displayed key to  correctly  certify  (sign)  other
              keys. GnuPG only asks for the ownertrust value if it has not yet
              been  assigned to a key. Using the [1m--edit-key [22mmenu, the assigned
              value can be changed at any time.

       [1m--check-trustdb[0m
              Do trust database maintenance  without  user  interaction.  From
              time  to time the trust database must be updated so that expired
              keys or signatures and the resulting changes in the Web of Trust
              can be tracked. Normally, GnuPG will calculate when this is  re‚Äê
              quired and do it automatically unless [1m--no-auto-check-trustdb [22mis
              set. This command can be used to force a trust database check at
              any  time.  The  processing  is  identical  to that of [1m--update-[0m
              [1mtrustdb [22mbut it skips keys with a not yet defined "ownertrust".

              For use with cron jobs, this command can be used  together  with
              [1m--batch [22min which case the trust database check is done only if a
              check  is  needed. To force a run even in batch mode add the op‚Äê
              tion [1m--yes[22m.

       [1m--export-ownertrust[0m
              Send the ownertrust values to STDOUT. This is useful for  backup
              purposes  as  these  values are the only ones which can't be re-
              created from a corrupted trustdb.  Example:
                  gpg --export-ownertrust > otrust.txt

       [1m--import-ownertrust[0m
              Update the trustdb with the ownertrust values  stored  in  [1mfiles[0m
              (or  STDIN  if  not given); existing values will be overwritten.
              In case of a severely damaged trustdb and if you have  a  recent
              backup of the ownertrust values (e.g. in the file ‚Äò[4motrust.txt[24m‚Äô),
              you may re-create the trustdb using these commands:
                  cd ~/.gnupg
                  rm trustdb.gpg
                  gpg --import-ownertrust < otrust.txt

       [1m--rebuild-keydb-caches[0m
              When updating from version 1.0.6 to 1.0.7 this command should be
              used  to  create  signature  caches  in the keyring. It might be
              handy in other situations too.

       [1m--print-md [4m[22malgo[0m
       [1m--print-mds[0m
              Print message digest of algorithm [4malgo[24m for all  given  files  or
              STDIN.   With the second form (or a deprecated "*" for [4malgo[24m) di‚Äê
              gests for all available algorithms are printed.

       [1m--gen-random [4m[22m0|1|2|16|30[24m [4mcount[0m
              Emit [4mcount[24m random bytes of the given quality level 0, 1 or 2. If
              [4mcount[24m is not given or zero, an endless sequence of random  bytes
              will be emitted.  If used with [1m--armor [22mthe output will be base64
              encoded.   The  special  level  16 uses a quality level of 1 and
              outputs an endless stream of hex-encoded  octets.   The  special
              level 30 outputs random as 30 zBase-32 characters.

       [1m--gen-prime [4m[22mmode[24m [4mbits[0m
              Use the source, Luke :-). The output format is subject to change
              with any release.

       [1m--enarmor[0m
       [1m--dearmor[0m
              Pack or unpack an arbitrary input into/from an OpenPGP ASCII ar‚Äê
              mor.   This  is  a GnuPG extension to OpenPGP and in general not
              very useful.  The [1m--dearmor [22mcommand can also be used to  dearmor
              PEM armors.

       [1m--unwrap[0m
              This  option modifies the command [1m--decrypt [22mto output the origi‚Äê
              nal message with the encryption layer removed.  Thus the  output
              will  be  an  OpenPGP  data structure which often means a signed
              OpenPGP message.  Note that this option may or may not remove  a
              compression  layer  which  is often found beneath the encryption
              layer.

       [1m--tofu-policy {auto|good|unknown|bad|ask} [4m[22mkeys[0m
              Set the TOFU policy for all the  bindings  associated  with  the
              specified  [4mkeys[24m.   For more information about the meaning of the
              policies, see: [trust-model-tofu].  The [4mkeys[24m  may  be  specified
              either by their fingerprint (preferred) or their keyid.

   [1mHow to manage your keys[0m

       This section explains the main commands for key management.

       [1m--quick-generate-key [4m[22muser-id[24m [[4malgo[24m [[4musage[24m [[4mexpire[24m]]]
       [1m--quick-gen-key[0m
              This  is  a  simple  command to generate a standard key with one
              user id.  In contrast to [1m--generate-key [22mthe key is generated di‚Äê
              rectly without the need to answer a bunch  of  prompts.   Unless
              the  option [1m--yes [22mis given, the key creation will be canceled if
              the given user id already exists in the keyring.

              If invoked directly on the console without any  special  options
              an  answer  to  a ``Continue?'' style confirmation prompt is re‚Äê
              quired.  In case the user id already exists  in  the  keyring  a
              second prompt to force the creation of the key will show up.

              If  [4malgo[24m or [4musage[24m are given, only the primary key is created and
              no prompts are shown.  To specify an expiration date  but  still
              create  a  primary  and  subkey  use ``default'' or ``future-de‚Äê
              fault'' for [4malgo[24m and ``default'' for [4musage[24m.  For  a  description
              of  these  optional  arguments  see the command [1m--quick-add-key[22m.
              The [4musage[24m accepts also the value ``cert'' which can be  used  to
              create  a  certification  only  primary key; the default is to a
              create certification and signing key.

              The [4mexpire[24m argument can be used to specify  an  expiration  date
              for  the  key.   Several formats are supported; commonly the ISO
              formats ``YYYY-MM-DD'' or ``YYYYMMDDThhmmss'' are used.  To make
              the key expire in N seconds, N days, N weeks,  N  months,  or  N
              years  use  ``seconds=N'', ``Nd'', ``Nw'', ``Nm'', or ``Ny'' re‚Äê
              spectively.  Not specifying a value, or using ``-'' results in a
              key expiring in  a  reasonable  default  interval.   The  values
              ``never'', ``none'' can be used for no expiration date.

              If  this  command is used with [1m--batch[22m, [1m--pinentry-mode [22mhas been
              set  to  [1mloopback[22m,   and   one   of   the   passphrase   options
              ([1m--passphrase[22m,  [1m--passphrase-fd[22m,  or [1m--passphrase-file[22m) is used,
              the supplied passphrase is used for the new key  and  the  agent
              does  not  ask  for  it.  To create a key without any protection
              [1m--passphrase '' [22mmay be used.

              To create an OpenPGP key from the keys  available  on  the  cur‚Äê
              rently  inserted  smartcard,  the special string ``card'' can be
              used for [4malgo[24m.  If the card features an encryption and a signing
              key, gpg will figure them out and creates an  OpenPGP  key  con‚Äê
              sisting  of  the  usual  primary key and one subkey.  This works
              only with certain smartcards.  Note that the interactive [1m--full-[0m
              [1mgen-key [22mcommand allows one to do the same but with greater flex‚Äê
              ibility in the selection of the smartcard keys.

              Note that it is possible to create a primary key  and  a  subkey
              using  non-default  algorithms by using ``default'' and changing
              the default parameters using the option [1m--default-new-key-algo[22m.

       [1m--quick-set-expire [4m[22mfpr[24m [4mexpire[24m [*|[4msubfprs[24m]
              With two arguments given, directly set the  expiration  time  of
              the  primary key identified by [4mfpr[24m to [4mexpire[24m.  To remove the ex‚Äê
              piration time [1m0 [22mcan be used.  With three arguments and the third
              given as an asterisk, the expiration time of all non-revoked and
              not yet expired subkeys are set to [4mexpire[24m.  With more  than  two
              arguments and a list of fingerprints given for [4msubfprs[24m, all non-
              revoked subkeys matching these fingerprints are set to [4mexpire[24m.

       [1m--quick-add-key [4m[22mfpr[24m [[4malgo[24m [[4musage[24m [[4mexpire[24m]]]
              Directly  add  a subkey to the key identified by the fingerprint
              [4mfpr[24m.  Without the optional arguments  an  encryption  subkey  is
              added.  If any of the arguments are given a more specific subkey
              is added.

              [4malgo[24m may be any of the supported algorithms or curve names given
              in the format as used by key listings.  To use the default algo‚Äê
              rithm  the  string  ``default'' or ``-'' can be used.  Supported
              algorithms   are   ``rsa'',   ``dsa'',   ``elg'',   ``ed25519'',
              ``cv25519'',  and  other  ECC  curves.   For  example the string
              ``rsa'' adds an RSA key with the default key  length;  a  string
              ``rsa4096''  requests  that  the  key  length is 4096 bits.  The
              string ``future-default'' is an alias for  the  algorithm  which
              will  likely  be used as default algorithm in future versions of
              gpg.  To list the supported ECC curves the command  [1mgpg  --with-[0m
              [1mcolons --list-config curve [22mcan be used.

              Depending  on the given [4malgo[24m the subkey may either be an encryp‚Äê
              tion subkey or a signing subkey.  If an algorithm is capable  of
              signing  and  encryption  and  such a subkey is desired, a [4musage[0m
              string must be given.  This  string  is  either  ``default''  or
              ``-''  to  keep  the default or a comma delimited list (or space
              delimited list) of keywords:  ``sign''  for  a  signing  subkey,
              ``auth''  for  an authentication subkey, and ``encr'' for an en‚Äê
              cryption subkey (``encrypt'' can be used as alias for ``encr'').
              The valid combinations depend on the algorithm.

              The [4mexpire[24m argument can be used to specify  an  expiration  date
              for  the  key.   Several formats are supported; commonly the ISO
              formats ``YYYY-MM-DD'' or ``YYYYMMDDThhmmss'' are used.  To make
              the key expire in N seconds, N days, N weeks,  N  months,  or  N
              years  use  ``seconds=N'', ``Nd'', ``Nw'', ``Nm'', or ``Ny'' re‚Äê
              spectively.  Not specifying a value, or using ``-'' results in a
              key expiring in  a  reasonable  default  interval.   The  values
              ``never'', ``none'' can be used for no expiration date.

       [1m--quick-add-adsk [4m[22mfpr[24m [4madskfpr[0m
              Directly  add an Additional Decryption Subkey to the key identi‚Äê
              fied by the fingerprint [4mfpr[24m.  [4madskfpr[24m is the fingerprint of  an‚Äê
              other  key's  encryption subkey.  A subkey is commonly used here
              because by default a primary key has no  encryption  capability.
              Use  the option [1m--with-subkey-fingerprint [22mwith a list command to
              display the subkey fingerprints.

       [1m--generate-key[0m
       [1m--gen-key[0m
              Generate a new key pair using the  current  default  parameters.
              This  is  the standard command to create a new key.  In addition
              to the key a revocation certificate is created and stored in the
              ‚Äò[4mopenpgp-revocs.d[24m‚Äô directory below the GnuPG home directory.

       [1m--full-generate-key[0m
       [1m--full-gen-key[0m
              Generate a new key pair with dialogs for all options.   This  is
              an extended version of [1m--generate-key[22m.

              There is also a feature which allows you to create keys in batch
              mode.  See  the  manual section ``Unattended key generation'' on
              how to use this.

       [1m--generate-revocation [4m[22mname[0m
       [1m--gen-revoke [4m[22mname[0m
              Generate a revocation certificate for the complete key.  To only
              revoke a subkey or a key signature, use the [1m--edit [22mcommand.

              This command merely creates the revocation certificate  so  that
              it can be used to revoke the key if that is ever needed.  To ac‚Äê
              tually  revoke a key the created revocation certificate needs to
              be merged with the key to revoke.  This is done by importing the
              revocation certificate using the [1m--import [22mcommand.  Then the re‚Äê
              voked key needs to be published, which is best done  by  sending
              the  key  to  a  keyserver (command [1m--send-key[22m) and by exporting
              ([1m--export[22m) it to a file which is then send to frequent  communi‚Äê
              cation partners.

       [1m--generate-designated-revocation [4m[22mname[0m
       [1m--desig-revoke [4m[22mname[0m
              Generate a designated revocation certificate for a key. This al‚Äê
              lows  a  user  (with  the permission of the keyholder) to revoke
              someone else's key.

       [1m--edit-key[0m
              Present a menu which enables you to do most of the  key  manage‚Äê
              ment  related  tasks.   It expects the specification of a key on
              the command line.

              [1muid [4m[22mn[24m  Toggle selection of user ID or photographic user ID  with
                     index [4mn[24m.  Use [1m* [22mto select all and [1m0 [22mto deselect all.

              [1mkey [4m[22mn[24m  Toggle selection of subkey with index [4mn[24m or key ID [4mn[24m.  Use
                     [1m* [22mto select all and [1m0 [22mto deselect all.

              [1msign   [22mMake  a  signature on key of user [1mname[22m. If the key is not
                     yet signed by the default user (or the users  given  with
                     [1m-u[22m),  the  program  displays  the  information of the key
                     again, together with its fingerprint and asks whether  it
                     should be signed. This question is repeated for all users
                     specified with [1m-u[22m.

              [1mlsign  [22mSame  as  "sign"  but  the signature is marked as non-ex‚Äê
                     portable and will therefore never be used by others. This
                     may be used to make keys valid only in the local environ‚Äê
                     ment.

              [1mnrsign [22mSame as "sign" but the signature is marked as non-revoca‚Äê
                     ble and can therefore never be revoked.

              [1mtsign  [22mMake a trust signature. This is a signature that combines
                     the notions of certification (like a regular  signature),
                     and  trust  (like  the  "trust" command). It is generally
                     useful in distinct communities or groups to implement the
                     concept of a Trusted Introducer.   For  more  information
                     please  read the sections ``Trust Signature'' and ``Regu‚Äê
                     lar Expression'' in RFC-4880.

              Note that "l" (for local / non-exportable), "nr" (for  non-revo‚Äê
              cable,  and  "t" (for trust) may be freely mixed and prefixed to
              "sign" to create a signature of any type desired.

       If the option [1m--only-sign-text-ids  [22mis  specified,  then  any  non-text
       based user ids (e.g., photo IDs) will not be selected for signing.

              [1mdelsig [22mDelete  a  signature. Note that it is not possible to re‚Äê
                     tract a signature, once it has been send  to  the  public
                     (i.e.  to  a  keyserver).   In  that  case you better use
                     [1mrevsig[22m.

              [1mrevsig [22mRevoke a signature. For every signature  which  has  been
                     generated by one of the secret keys, GnuPG asks whether a
                     revocation certificate should be generated.

              [1mcheck  [22mCheck  the signatures on all selected user IDs.  With the
                     extra option [1mselfsig [22monly self-signatures are shown.

              [1madduid [22mCreate an additional user ID.

              [1maddphoto[0m
                     Create a photographic user ID. This  will  prompt  for  a
                     JPEG  file  that  will be embedded into the user ID. Note
                     that a very large JPEG will make for a  very  large  key.
                     Also  note  that some programs will display your JPEG un‚Äê
                     changed (GnuPG), and some programs will scale it  to  fit
                     in a dialog box (PGP).

              [1mshowphoto[0m
                     Display the selected photographic user ID.

              [1mdeluid [22mDelete  a  user ID or photographic user ID.  Note that it
                     is not possible to retract a user id, once  it  has  been
                     send  to  the public (i.e. to a keyserver).  In that case
                     you better use [1mrevuid[22m.

              [1mrevuid [22mRevoke a user ID or photographic user ID.

              [1mprimary[0m
                     Flag the current user id as the primary one, removes  the
                     primary user id flag from all other user ids and sets the
                     timestamp  of  all  affected  self-signatures  one second
                     ahead. Note that setting a photo user ID as primary makes
                     it primary over other photo user IDs, and setting a regu‚Äê
                     lar user ID as primary makes it primary over other  regu‚Äê
                     lar user IDs.

              [1mkeyserver[0m
                     Set  a  preferred keyserver for the specified user ID(s).
                     This allows other users to know where you prefer they get
                     your key from. See  [1m--keyserver-options  honor-keyserver-[0m
                     [1murl  [22mfor  more  on  how  this  works.  Setting a value of
                     "none" removes an existing preferred keyserver.

              [1mnotation[0m
                     Set a name=value notation for the specified  user  ID(s).
                     See [1m--cert-notation [22mfor more on how this works. Setting a
                     value of "none" removes all notations, setting a notation
                     prefixed with a minus sign (-) removes that notation, and
                     setting  a  notation  name  (without the =value) prefixed
                     with a minus sign removes all notations with that name.

              [1mpref   [22mList preferences from the selected user  ID.  This  shows
                     the  actual  preferences,  without  including any implied
                     preferences.

              [1mshowpref[0m
                     More verbose preferences listing for  the  selected  user
                     ID. This shows the preferences in effect by including the
                     implied preferences of 3DES (cipher), SHA-1 (digest), and
                     Uncompressed  (compression)  if  they are not already in‚Äê
                     cluded in the preference list. In addition, the preferred
                     keyserver and signature notations (if any) are shown.

              [1msetpref [4m[22mstring[0m
                     Set the list of user ID preferences to [4mstring[24m for all (or
                     just the selected) user IDs. Calling setpref with no  ar‚Äê
                     guments  sets  the preference list to the default (either
                     built-in or set via [1m--default-preference-list[22m), and call‚Äê
                     ing setpref with "none" as the  argument  sets  an  empty
                     preference  list.  Use  [1mgpg  --version  [22mto  get a list of
                     available algorithms. Note that while you can change  the
                     preferences  on  an  attribute  user ID (aka "photo ID"),
                     GnuPG does not select keys  via  attribute  user  IDs  so
                     these  preferences  will not be used by GnuPG.  Note that
                     an unattended version of this  command  is  available  as
                     [1m--quick-update-pref[22m.

                     When  setting preferences, you should list the algorithms
                     in the order which you'd like to see them used by someone
                     else when encrypting a message to your key.  If you don't
                     include 3DES, it will be automatically added at the  end.
                     Note that there are many factors that go into choosing an
                     algorithm  (for example, your key may not be the only re‚Äê
                     cipient), and so the  remote  OpenPGP  application  being
                     used to send to you may or may not follow your exact cho‚Äê
                     sen  order  for  a given message.  It will, however, only
                     choose an algorithm that is  present  on  the  preference
                     list of every recipient key.  See also the INTEROPERABIL‚Äê
                     ITY WITH OTHER OPENPGP PROGRAMS section below.

              [1maddkey [22mAdd a subkey to this key.

              [1maddcardkey[0m
                     Generate a subkey on a card and add it to this key.

              [1mkeytocard[0m
                     Transfer  the  selected secret subkey (or the primary key
                     if no subkey has been selected) to a smartcard.  The  se‚Äê
                     cret key in the keyring will be replaced by a stub if the
                     key  could be stored successfully on the card and you use
                     the save command later. Only certain  key  types  may  be
                     transferred  to the card. A sub menu allows you to select
                     on what card to store the key. Note that it is not possi‚Äê
                     ble to get that key back from the card - if the card gets
                     broken your secret key will be lost  unless  you  have  a
                     backup somewhere.

              [1mbkuptocard [4m[22mfile[0m
                     Restore  the  given  [4mfile[24m  to a card. This command may be
                     used to restore a backup key (as  generated  during  card
                     initialization)  to  a new card. In almost all cases this
                     will be the encryption key. You should use  this  command
                     only with the corresponding public key and make sure that
                     the  file  given  as argument is indeed the backup to re‚Äê
                     store. You should then select 2 to restore as  encryption
                     key.   You will first be asked to enter the passphrase of
                     the backup key and then for the Admin PIN of the card.

              [1mkeytotpm[0m
                     Transfer the selected secret subkey (or the  primary  key
                     if  no subkey has been selected) to TPM form.  The secret
                     key in the keyring will be replaced by the TPM  represen‚Äê
                     tation of that key, which can only be read by the partic‚Äê
                     ular  TPM  that  created  it  (so the keyfile now becomes
                     locked to the laptop containing the TPM).   Only  certain
                     key types may be transferred to the TPM (all TPM 2.0 sys‚Äê
                     tems  are mandated to have the rsa2048 and nistp256 algo‚Äê
                     rithms but newer TPMs may have more). Note that  the  key
                     itself  is not transferred into the TPM, merely encrypted
                     by the TPM in-place, so if the keyfile  is  deleted,  the
                     key  will  be  lost.  Once transferred to TPM representa‚Äê
                     tion, the key file can never be converted back to non-TPM
                     form and the key will die  when  the  TPM  does,  so  you
                     should  first  have a backup on secure offline storage of
                     the actual secret key file before conversion.  It is  es‚Äê
                     sential  to  use the physical system TPM that you have rw
                     permission   on   the   TPM   resource   manager   device
                     (/dev/tpmrm0).   Usually  this means you must be a member
                     of the tss group.

              [1mdelkey [22mRemove a subkey (secondary key). Note that it is not pos‚Äê
                     sible to retract a subkey, once it has been send  to  the
                     public  (i.e.  to  a keyserver).  In that case you better
                     use [1mrevkey[22m.  Also note that this only deletes the  public
                     part of a key.

              [1mrevkey [22mRevoke a subkey.

              [1mexpire [22mChange  the key or subkey expiration time. If a subkey is
                     selected, the expiration time  of  this  subkey  will  be
                     changed.  With  no  selection,  the key expiration of the
                     primary key is changed.

              [1mtrust  [22mChange the owner trust value for the  key.  This  updates
                     the trust-db immediately and no save is required.

              [1mdisable[0m
              [1menable [22mDisable  or  enable an entire key. A disabled key can not
                     normally be used for encryption.

              [1maddrevoker[0m
                     Add a designated revoker to the key. This takes  one  op‚Äê
                     tional  argument: "sensitive". If a designated revoker is
                     marked as sensitive, it will not be exported  by  default
                     (see export-options).

              [1maddadsk[0m
                     Add  an  Additional Decryption Subkey.  The user is asked
                     to enter the fingerprint of  another  encryption  subkey.
                     Note  that the exact fingerprint of another key's encryp‚Äê
                     tion subkey needs to be entered.  This  is  because  com‚Äê
                     monly  the primary key has no encryption capability.  Use
                     the option [1m--with-subkey-fingerprint [22mwith a list  command
                     to display the subkey fingerprints.

              [1mpasswd [22mChange the passphrase of the secret key.

              [1mtoggle [22mThis is dummy command which exists only for backward com‚Äê
                     patibility.

              [1mclean  [22mCompact  (by  removing all signatures except the selfsig)
                     any user ID that is no longer usable  (e.g.  revoked,  or
                     expired). Then, remove any signatures that are not usable
                     by  the  trust  calculations.  Specifically, this removes
                     any signature that does not validate, any signature  that
                     is  superseded  by a later signature, revoked signatures,
                     and signatures issued by keys that are not present on the
                     keyring.

              [1mminimize[0m
                     Make the key as small as possible. This removes all  sig‚Äê
                     natures  from  each  user  ID  except for the most recent
                     self-signature.

              [1mchange-usage[0m
                     Change the usage flags (capabilities) of the primary  key
                     or  of  subkeys.   These usage flags (e.g. Certify, Sign,
                     Authenticate,  Encrypt)  are  set  during  key  creation.
                     Sometimes  it is useful to have the opportunity to change
                     them (for example to add Authenticate)  after  they  have
                     been  created.  Please take care when doing this; the al‚Äê
                     lowed usage flags depend on the key algorithm.

              [1mcross-certify[0m
                     Add cross-certification  signatures  to  signing  subkeys
                     that  may  not  currently  have them. Cross-certification
                     signatures protect against a subtle attack against  sign‚Äê
                     ing  subkeys. See [1m--require-cross-certification[22m.  All new
                     keys generated have this signature by  default,  so  this
                     command is only useful to bring older keys up to date.

              [1msave   [22mSave all changes to the keyring and quit.

              [1mquit   [22mQuit the program without updating the keyring.

              The  listing  shows  you the key with its secondary keys and all
              user IDs.  The primary user ID is indicated by a  dot,  and  se‚Äê
              lected keys or user IDs are indicated by an asterisk.  The trust
              value is displayed with the primary key: "trust" is the assigned
              owner  trust  and  "validity"  is the calculated validity of the
              key.  Validity values are also displayed for all user IDs.   For
              possible values of trust, see: [trust-values].

       [1m--sign-key [4m[22mname[0m
              Signs a public key with your secret key. This is a shortcut ver‚Äê
              sion of the subcommand "sign" from [1m--edit-key[22m.

       [1m--lsign-key [4m[22mname[0m
              Signs  a public key with your secret key but marks it as non-ex‚Äê
              portable. This is a shortcut version of the  subcommand  "lsign"
              from [1m--edit-key[22m.

       [1m--quick-sign-key [4m[22mfpr[24m [[4mnames[24m]
       [1m--quick-lsign-key [4m[22mfpr[24m [[4mnames[24m]
              Directly sign a key from the passphrase without any further user
              interaction.   The  [4mfpr[24m must be the verified primary fingerprint
              of a key in the local keyring. If no [4mnames[24m are given, all useful
              user ids are signed; with given [[4mnames[24m]  only  useful  user  ids
              matching  one  of  these  names are signed.  By default, or if a
              name is prefixed with a '*', a case insensitive substring  match
              is  used.  If a name is prefixed with a '=' a case sensitive ex‚Äê
              act match is done.

              The command [1m--quick-lsign-key [22mmarks the  signatures  as  non-ex‚Äê
              portable.  If such a non-exportable signature already exists the
              [1m--quick-sign-key  [22mturns  it into a exportable signature.  If you
              need to update an existing signature,  for  example  to  add  or
              change  notation  data, you need to use the option [1m--force-sign-[0m
              [1mkey[22m.

              This command uses reasonable defaults and thus does not  provide
              the  full  flexibility of the "sign" subcommand from [1m--edit-key[22m.
              Its intended use is to help unattended key signing by  utilizing
              a list of verified fingerprints.

       [1m--quick-add-uid [4m[22muser-id[24m [4mnew-user-id[0m
              This command adds a new user id to an existing key.  In contrast
              to  the  interactive  sub-command  [1madduid [22mof [1m--edit-key [22mthe [4mnew-[0m
              [4muser-id[24m is added verbatim with only leading and  trailing  white
              space removed, it is expected to be UTF-8 encoded, and no checks
              on its form are applied.

       [1m--quick-revoke-uid [4m[22muser-id[24m [4muser-id-to-revoke[0m
              This command revokes a user ID on an existing key.  It cannot be
              used to revoke the last user ID on key (some non-revoked user ID
              must  remain),  with  revocation  reason  ``User ID is no longer
              valid''.  If you want to specify a different revocation  reason,
              or  to  supply supplementary revocation text, you should use the
              interactive sub-command [1mrevuid [22mof [1m--edit-key[22m.

       [1m--quick-revoke-sig [4m[22mfpr[24m [4msigning-fpr[24m [[4mnames[24m]
              This command revokes the key signatures made by [4msigning-fpr[24m from
              the key specified by the fingerprint [4mfpr[24m.  With [4mnames[24m given only
              the signatures on user ids of the key matching any of the  given
              names  are affected (see [1m--quick-sign-key[22m).  If a revocation al‚Äê
              ready exists a notice is printed instead of creating a new revo‚Äê
              cation; no error is returned in this case.  Note that key signa‚Äê
              ture revocations may be superseded by a newer key signature  and
              in turn again revoked.

       [1m--quick-set-primary-uid [4m[22muser-id[24m [4mprimary-user-id[0m
              This  command sets or updates the primary user ID flag on an ex‚Äê
              isting key.  [4muser-id[24m specifies the key and  [4mprimary-user-id[24m  the
              user ID which shall be flagged as the primary user ID.  The pri‚Äê
              mary  user  ID  flag  is removed from all other user ids and the
              timestamp of all affected  self-signatures  is  set  one  second
              ahead.

       [1m--quick-update-pref [4m[22muser-id[0m
              This  command updates the preference list of the key to the cur‚Äê
              rent default value (either built-in or set via [1m--default-prefer‚Äê[0m
              [1mence-list[22m).  This is the unattended version of  of  using  "set‚Äê
              pref"  in  the [1m--key-edit [22mmenu without giving a list.  Note that
              you can show the preferences in a key listing by  using  [1m--list-[0m
              [1moptions  show-pref  [22mor  [1m--list-options  show-pref-verbose[22m.   You
              should also re-distribute updated keys to your peers.

       [1m--change-passphrase [4m[22muser-id[0m
       [1m--passwd [4m[22muser-id[0m
              Change the passphrase of the secret key belonging  to  the  cer‚Äê
              tificate  specified as [4muser-id[24m.  This is a shortcut for the sub-
              command [1mpasswd [22mof the [1m--edit-key [22mmenu.  When using together with
              the  option  [1m--dry-run  [22mthis  will  not  actually   change   the
              passphrase but check that the current passphrase is correct.

[1mOPTIONS[0m
       [1mgpg  [22mfeatures  a bunch of options to control the exact behaviour and to
       change the default configuration.

       Long   options   can   be   put   in   an   options    file    (default
       "~/.gnupg/gpg.conf").  Short  option names will not work - for example,
       "armor" is a valid option for the options file, while "a"  is  not.  Do
       not  write  the 2 dashes, but simply the name of the option and any re‚Äê
       quired arguments. Lines with a hash ('#') as the first  non-white-space
       character  are  ignored. Commands may be put in this file too, but that
       is not generally useful as the command will execute automatically  with
       every execution of gpg.

       Please  remember  that  option parsing stops as soon as a non-option is
       encountered, you can explicitly stop parsing by using the  special  op‚Äê
       tion [1m--[22m.

   [1mHow to change the configuration[0m

       These options are used to change the configuration and most of them are
       usually found in the option file.

       [1m--default-key [4m[22mname[0m
              Use  [4mname[24m as the default key to sign with. If this option is not
              used, the default key is the  first  key  found  in  the  secret
              keyring.   Note  that  [1m-u [22mor [1m--local-user [22moverrides this option.
              This option may be given multiple times.  In this case, the last
              key for which a secret key is available is used.  If there is no
              secret key available for any of the specified values, GnuPG will
              not emit an error message but continue as if this option  wasn't
              given.

       [1m--default-recipient [4m[22mname[0m
              Use  [4mname[24m as default recipient if option [1m--recipient [22mis not used
              and don't ask if this is a valid one. [4mname[24m must be non-empty.

       [1m--default-recipient-self[0m
              Use the default key as default recipient if  option  [1m--recipient[0m
              is  not  used  and don't ask if this is a valid one. The default
              key is the first one from the secret keyring or the one set with
              [1m--default-key[22m.

       [1m--no-default-recipient[0m
              Reset [1m--default-recipient [22mand [1m--default-recipient-self[22m.   Should
              not be used in an option file.

       [1m-v, --verbose[0m
              Give  more information during processing. If used twice, the in‚Äê
              put data is listed in detail.

       [1m--no-verbose[0m
              Reset verbose level to 0.  Should not be used in an option file.

       [1m-q, --quiet[0m
              Try to be as quiet as possible.  Should not be used in an option
              file.

       [1m--batch[0m
       [1m--no-batch[0m
              Use batch mode.  Never ask, do not allow  interactive  commands.
              [1m--no-batch [22mdisables this option.  Note that even with a filename
              given  on  the  command  line, gpg might still need to read from
              STDIN (in particular if gpg figures that the input is a detached
              signature and no data file has been specified).  Thus if you  do
              not  want  to  feed  data via STDIN, you should connect STDIN to
              ‚Äò[4m/dev/null[24m‚Äô.

              It is highly recommended to use this option along with  the  op‚Äê
              tions  [1m--status-fd  [22mand  [1m--with-colons [22mfor any unattended use of
              [1mgpg[22m.  Should not be used in an option file.

       [1m--no-tty[0m
              Make sure that the TTY (terminal) is never used for any  output.
              This  option  is  needed  in  some cases because GnuPG sometimes
              prints warnings to the TTY even if [1m--batch [22mis used.

       [1m--yes  [22mAssume "yes" on most questions.  Should not be used in an option
              file.

       [1m--no   [22mAssume "no" on most questions.  Should not be used in an  option
              file.

       [1m--list-filter {select=[4m[22mexpr[24m}
              A list filter can be used to output only certain keys during key
              listing  commands. For the available property names, see the de‚Äê
              scription of [1m--import-filter[22m.

       [1m--list-options [4m[22mparameters[0m
              This is a space or comma delimited  string  that  gives  options
              used  when  listing  keys  and signatures (that is, [1m--list-keys[22m,
              [1m--check-signatures[22m, [1m--list-public-keys[22m, [1m--list-secret-keys[22m,  and
              the  [1m--edit-key [22mfunctions).  Options can be prepended with a [1mno-[0m
              (after the two dashes) to give the opposite  meaning.   The  op‚Äê
              tions are:

              [1mshow-photos[0m
                     Causes  [1m--list-keys[22m,  [1m--check-signatures[22m,  [1m--list-public-[0m
                     [1mkeys[22m, and [1m--list-secret-keys [22mto display any photo IDs at‚Äê
                     tached to the key.  Defaults to  no.  See  also  [1m--photo-[0m
                     [1mviewer[22m.   Does  not  work  with  [1m--with-colons[22m: see [1m--at‚Äê[0m
                     [1mtribute-fd [22mfor the appropriate way to get photo data  for
                     scripts and other frontends.

              [1mshow-usage[0m
                     Show  usage information for keys and subkeys in the stan‚Äê
                     dard key listing.  This is a list of  letters  indicating
                     the  allowed  usage  for  a key ([1mE[22m=encryption, [1mS[22m=signing,
                     [1mC[22m=certification, [1mA[22m=authentication).  Defaults to yes.

              [1mshow-policy-urls[0m
                     Show policy URLs  in  the   [1m--check-signatures  [22mlistings.
                     Defaults to no.

              [1mshow-notations[0m
              [1mshow-std-notations[0m
              [1mshow-user-notations[0m
                     Show  all, IETF standard, or user-defined signature nota‚Äê
                     tions in the [1m--check-signatures [22mlistings. Defaults to no.

              [1mshow-keyserver-urls[0m
                     Show any preferred keyserver URL  in  the  [1m--check-signa‚Äê[0m
                     [1mtures [22mlistings. Defaults to no.

              [1mshow-uid-validity[0m
                     Display  the  calculated  validity of user IDs during key
                     listings.  Defaults to yes.

              [1mshow-unusable-uids[0m
                     Show revoked and expired user IDs in  key  listings.  De‚Äê
                     faults to no.

              [1mshow-unusable-subkeys[0m
                     Show  revoked  and  expired  subkeys in key listings. De‚Äê
                     faults to no.

              [1mshow-unusable-sigs[0m
                     Show key signature made using weak or  unsupported  algo‚Äê
                     rithms.

              [1mshow-keyring[0m
                     Display  the  keyring name at the head of key listings to
                     show which keyring a given key resides  on.  Defaults  to
                     no.

              [1mshow-sig-expire[0m
                     Show  signature expiration dates (if any) during [1m--check-[0m
                     [1msignatures [22mlistings. Defaults to no.

              [1mshow-sig-subpackets[0m
                     Include signature subpackets in the key listing. This op‚Äê
                     tion can take an optional argument list of the subpackets
                     to list. If no argument is passed, list  all  subpackets.
                     Defaults to no. This option is only meaningful when using
                     [1m--with-colons [22malong with [1m--check-signatures[22m.

              [1mshow-only-fpr-mbox[0m
                     For  each  user-id  which  has a valid mail address print
                     only the fingerprint followed by the mail address.

              [1msort-sigs[0m
                     With --list-sigs and --check-sigs sort the signatures  by
                     keyID  and  creation  time  to make it easier to view the
                     history of these signatures.  The self-signature is  also
                     listed before other signatures. Defaults to yes.

       [1m--verify-options [4m[22mparameters[0m
              This  is  a  space  or comma delimited string that gives options
              used when verifying signatures. Options can be prepended with  a
              `no-' to give the opposite meaning. The options are:

              [1mshow-photos[0m
                     Display  any photo IDs present on the key that issued the
                     signature.  Defaults to no. See also [1m--photo-viewer[22m.

              [1mshow-policy-urls[0m
                     Show policy URLs in the  signature  being  verified.  De‚Äê
                     faults to yes.

              [1mshow-notations[0m
              [1mshow-std-notations[0m
              [1mshow-user-notations[0m
                     Show  all, IETF standard, or user-defined signature nota‚Äê
                     tions in the signature being verified. Defaults  to  IETF
                     standard.

              [1mshow-keyserver-urls[0m
                     Show  any  preferred keyserver URL in the signature being
                     verified.  Defaults to yes.

              [1mshow-uid-validity[0m
                     Display the calculated validity of the user  IDs  on  the
                     key that issued the signature. Defaults to yes.

              [1mshow-unusable-uids[0m
                     Show  revoked and expired user IDs during signature veri‚Äê
                     fication.  Defaults to no.

              [1mshow-primary-uid-only[0m
                     Show only the primary user ID during signature  verifica‚Äê
                     tion.  That is all the AKA lines as well as photo Ids are
                     not shown with the signature verification status.

       [1m--enable-large-rsa[0m
       [1m--disable-large-rsa[0m
              With  --generate-key and --batch, enable the creation of RSA se‚Äê
              cret keys as large as 8192 bit.  Note: 8192 bit is more than  is
              generally recommended.  These large keys don't significantly im‚Äê
              prove  security,  but  they are more expensive to use, and their
              signatures and certifications are larger.  This option  is  only
              available if the binary was build with large-secmem support.

       [1m--enable-dsa2[0m
       [1m--disable-dsa2[0m
              Enable hash truncation for all DSA keys even for old DSA Keys up
              to  1024  bit.   This  is also the default with [1m--openpgp[22m.  Note
              that older versions of GnuPG also required this  flag  to  allow
              the generation of DSA larger than 1024 bit.

       [1m--photo-viewer [4m[22mstring[0m
              This  is the command line that should be run to view a photo ID.
              "%i" will be expanded to a filename containing the  photo.  "%I"
              does  the  same,  except  the  file will not be deleted once the
              viewer exits.  Other flags are "%k" for the key ID, "%K" for the
              long key ID, "%f" for the key fingerprint, "%t" for  the  exten‚Äê
              sion  of  the image type (e.g. "jpg"), "%T" for the MIME type of
              the image (e.g. "image/jpeg"),  "%v"  for  the  single-character
              calculated  validity  of the image being viewed (e.g. "f"), "%V"
              for the calculated validity as a string (e.g.  "full"), "%U" for
              a base32 encoded hash of the user ID, and  "%%"  for  an  actual
              percent  sign.  If  neither %i or %I are present, then the photo
              will be supplied to the viewer on standard input.

              On Unix the default viewer is  [1mxloadimage  -fork  -quiet  -title[0m
              [1m'KeyID  0x%k'  STDIN  [22mwith  a  fallback to [1mdisplay -title 'KeyID[0m
              [1m0x%k' %i [22mand finally to [1mxdg-open %i[22m.  On  Windows  [1m!ShellExecute[0m
              [1m400  %i  [22mis used; here the command is a meta command to use that
              API call followed by a wait time in milliseconds which  is  used
              to  give the viewer time to read the temporary image file before
              gpg deletes it again.  Note that if your image viewer program is
              not secure, then executing it from gpg does not make it secure.

       [1m--exec-path [4m[22mstring[0m
              Sets a list of directories to search for photo  viewers  If  not
              provided photo viewers use the [1mPATH [22menvironment variable.

       [1m--keyring [4m[22mfile[0m
              Add  [4mfile[24m to the current list of keyrings. If [4mfile[24m begins with a
              tilde and a slash, these are replaced by the $HOME directory. If
              the filename does not contain a slash, it is assumed  to  be  in
              the   GnuPG  home  directory  ("~/.gnupg"  unless  [1m--homedir  [22mor
              $GNUPGHOME is used).

              Note that this adds a keyring to the current list. If the intent
              is to use the specified keyring alone, use [1m--keyring [22malong  with
              [1m--no-default-keyring[22m.

              If  the  option  [1m--no-keyring  [22mhas been used no keyrings will be
              used at all.

              Note that if the option [1muse-keyboxd [22mis enabled in ‚Äò[4mcommon.conf[24m‚Äô,
              no keyrings are used at all and keys are all maintained  by  the
              keyboxd process in its own database.

       [1m--primary-keyring [4m[22mfile[0m
              This is a varian of [1m--keyring [22mand designates [4mfile[24m as the primary
              public  keyring.  This means that newly imported keys (via [1m--im‚Äê[0m
              [1mport [22mor keyserver [1m--recv-from[22m) will go to this keyring.

       [1m--secret-keyring [4m[22mfile[0m
              This is an obsolete option and ignored.   All  secret  keys  are
              stored in the ‚Äò[4mprivate-keys-v1.d[24m‚Äô directory below the GnuPG home
              directory.

       [1m--trustdb-name [4m[22mfile[0m
              Use  [4mfile[24m  instead of the default trustdb. If [4mfile[24m begins with a
              tilde and a slash, these are replaced by the $HOME directory. If
              the filename does not contain a slash, it is assumed  to  be  in
              the  GnuPG home directory (‚Äò[4m~/.gnupg[24m‚Äô if [1m--homedir [22mor $GNUPGHOME
              is not used).

       [1m--homedir [4m[22mdir[0m
              Set the name of the home directory to [4mdir[24m. If this option is not
              used, the home directory defaults to  ‚Äò[4m~/.gnupg[24m‚Äô.   It  is  only
              recognized  when  given  on the command line.  It also overrides
              any home  directory  stated  through  the  environment  variable
              ‚Äò[4mGNUPGHOME[24m‚Äô or (on Windows systems) by means of the Registry en‚Äê
              try [4mHKCU\Software\GNU\GnuPG:HomeDir[24m.

              On Windows systems it is possible to install GnuPG as a portable
              application.  In this case only this command line option is con‚Äê
              sidered, all other ways to set a home directory are ignored.

       [1m--display-charset [4m[22mname[0m
              Set  the  name of the native character set. This is used to con‚Äê
              vert some informational strings like  user  IDs  to  the  proper
              UTF-8 encoding.  Note that this has nothing to do with the char‚Äê
              acter  set of data to be encrypted or signed; GnuPG does not re‚Äê
              code user-supplied data. If this option is not used, the default
              character set is determined from the current locale. A verbosity
              level of 3 shows the chosen set.  This option should not be used
              on Windows.  Valid values for [4mname[24m are:

              [1miso-8859-1[0m
                     This is the Latin 1 set.

              [1miso-8859-2[0m
                     The Latin 2 set.

              [1miso-8859-15[0m
                     This is currently an alias for the Latin 1 set.

              [1mkoi8-r [22mThe usual Russian set (RFC-1489).

              [1mutf-8  [22mBypass all translations and assume that the OS  uses  na‚Äê
                     tive UTF-8 encoding.

       [1m--utf8-strings[0m
       [1m--no-utf8-strings[0m
              Assume  that  command line arguments are given as UTF-8 strings.
              The default ([1m--no-utf8-strings[22m) is to assume that arguments  are
              encoded  in the character set as specified by [1m--display-charset[22m.
              These options affect all following arguments. Both  options  may
              be  used  multiple  times.  This option should not be used in an
              option file.

              This option has no effect on Windows.  There the  internal  used
              UTF-8  encoding is translated for console input and output.  The
              command line arguments are expected as Unicode and translated to
              UTF-8.  Thus when calling this program from another,  make  sure
              to use the Unicode version of CreateProcess.

       [1m--options [4m[22mfile[0m
              Read  options from [4mfile[24m and do not try to read them from the de‚Äê
              fault options file in the homedir (see [1m--homedir[22m).  This  option
              is ignored if used in an options file.

       [1m--no-options[0m
              Shortcut for [1m--options /dev/null[22m. This option is detected before
              an  attempt to open an option file.  Using this option will also
              prevent the creation of a ‚Äò[4m~/.gnupg[24m‚Äô homedir.

       [1m-z [4m[22mn[0m
       [1m--compress-level [4m[22mn[0m
       [1m--bzip2-compress-level [4m[22mn[0m
       [1m--no-compress[0m
              Set compression level to [4mn[24m for the ZIP and ZLIB compression  al‚Äê
              gorithms. The default is to use the default compression level of
              zlib  (normally  6). [1m--bzip2-compress-level [22msets the compression
              level for the BZIP2 compression algorithm (defaulting  to  6  as
              well).  This  is  a different option from [1m--compress-level [22msince
              BZIP2 uses a significant amount of memory  for  each  additional
              compression level.

              Option [1m-z [22msets both. A value of 0 for [4mn[24m disables compression.  A
              value  of -1 forces compression using the default level.  Option
              [1m--no-compress [22mis identical to [1m-z0[22m.

              Except for the [1m--store [22mcommand compression is always used unless
              [1mgpg [22mdetects that the input is already  compressed.   To  inhibit
              the  use  of compression use [1m-z0 [22mor [1m--no-compress[22m; to force com‚Äê
              pression use [1m-z-1 [22mor option [1mz  [22mwith  another  compression  level
              than  the default as indicated by -1.  Note that this overriding
              of the default deection works only with [1mz [22mand not with the  long
              variant of this option.

       [1m--bzip2-decompress-lowmem[0m
              Use a different decompression method for BZIP2 compressed files.
              This  alternate method uses a bit more than half the memory, but
              also runs at half the speed. This is useful  under  extreme  low
              memory  circumstances when the file was originally compressed at
              a high [1m--bzip2-compress-level[22m.

       [1m--mangle-dos-filenames[0m
       [1m--no-mangle-dos-filenames[0m
              Older version of Windows cannot handle filenames with more  than
              one  dot. [1m--mangle-dos-filenames [22mcauses GnuPG to replace (rather
              than add to) the extension of an output filename to  avoid  this
              problem. This option is off by default and has no effect on non-
              Windows platforms.

       [1m--ask-cert-level[0m
       [1m--no-ask-cert-level[0m
              When  making  a key signature, prompt for a certification level.
              If this option is not specified, the certification level used is
              set via [1m--default-cert-level[22m. See [1m--default-cert-level  [22mfor  in‚Äê
              formation  on  the  specific levels and how they are used. [1m--no-[0m
              [1mask-cert-level [22mdisables this option. This option defaults to no.

       [1m--default-cert-level [4m[22mn[0m
              The default to use for the check level when signing a key.

              0 means you make no particular claim as  to  how  carefully  you
              verified the key.

              1 means you believe the key is owned by the person who claims to
              own it but you could not, or did not verify the key at all. This
              is  useful  for a "persona" verification, where you sign the key
              of a pseudonymous user.

              2 means you did casual verification of  the  key.  For  example,
              this  could  mean  that  you  verified  the  key fingerprint and
              checked the user ID on the key against a photo ID.

              3 means you did extensive verification of the key. For  example,
              this  could  mean that you verified the key fingerprint with the
              owner of the key in person, and that you checked, by means of  a
              hard to forge document with a photo ID (such as a passport) that
              the name of the key owner matches the name in the user ID on the
              key,  and  finally that you verified (by exchange of email) that
              the email address on the key belongs to the key owner.

              Note that the examples given above for levels 2 and 3  are  just
              that:  examples. In the end, it is up to you to decide just what
              "casual" and "extensive" mean to you.

              This option defaults to 0 (no particular claim).

       [1m--min-cert-level[0m
              When building the trust database, treat any  signatures  with  a
              certification  level below this as invalid. Defaults to 2, which
              disregards level 1 signatures. Note that level 0 "no  particular
              claim" signatures are always accepted.

       [1m--trusted-key [4m[22mlong[24m [4mkey[24m [4mID[24m [4mor[24m [4mfingerprint[0m
              Assume  that the specified key (which should be given as finger‚Äê
              print) is as trustworthy as one of your own  secret  keys.  This
              option  is useful if you don't want to keep your secret keys (or
              one of them) online but still want to be able to check  the  va‚Äê
              lidity  of  a given recipient's or signator's key.  If the given
              key is not locally available but an LDAP keyserver is configured
              the missing key is imported from that server.

       [1m--add-desig-revoker [sensitive:][4m[22mfingerprint[0m
              Add the key specified by [4mfingerprint[24m as a designated revoker  to
              newly  created  keys.   If  the fingerprint is prefixed with the
              keyword ``sensitive:'' that info is normally  not  exported  wit
              the key.  This option may be given several time to add more than
              one  designated  revoker.   If the keyword ``clear'' is used in‚Äê
              stead of a fingerprint, all designated  options  previously  en‚Äê
              countered  are discarded.  Designated revokers are marked on the
              key as non-revocable.  Note that a designated revoker  specified
              using a parameter file will also be added to the key.

       [1m--trust-model {pgp|classic|tofu|tofu+pgp|direct|always|auto}[0m
              Set what trust model GnuPG should follow. The models are:

              [1mpgp    [22mThis  is  the Web of Trust combined with trust signatures
                     as used in PGP 5.x and later. This is the  default  trust
                     model when creating a new trust database.

              [1mclassic[0m
                     This is the standard Web of Trust as introduced by PGP 2.

              [1mtofu[0m

                     TOFU stands for Trust On First Use.  In this experimental
                     trust  model,  the  first time a key is seen, it is memo‚Äê
                     rized.  If later another key with a user id with the same
                     email address is seen, both keys are marked  as  suspect.
                     In  that case, the next time either is used, a warning is
                     displayed describing the conflict, why it might have  oc‚Äê
                     curred (either the user generated a new key and failed to
                     cross sign the old and new keys, the key is forgery, or a
                     man-in-the-middle  attack  is  being  attempted), and the
                     user is prompted to manually confirm the validity of  the
                     key in question.

                     Because a potential attacker is able to control the email
                     address and thereby circumvent the conflict detection al‚Äê
                     gorithm  by using an email address that is similar in ap‚Äê
                     pearance to a trusted email address, whenever  a  message
                     is  verified,  statistics  about  the  number of messages
                     signed with the key are shown.  In this way, a  user  can
                     easily  identify attacks using fake keys for regular cor‚Äê
                     respondents.

                     When compared with the Web of Trust, TOFU offers signifi‚Äê
                     cantly weaker security guarantees.  In  particular,  TOFU
                     only  helps ensure consistency (that is, that the binding
                     between a key and email address doesn't change).  A major
                     advantage of TOFU is that it requires little  maintenance
                     to  use correctly.  To use the web of trust properly, you
                     need to actively sign keys and mark users as trusted  in‚Äê
                     troducers.   This is a time-consuming process and anecdo‚Äê
                     tal evidence suggests that even security-conscious  users
                     rarely  take  the  time to do this thoroughly and instead
                     rely on an ad-hoc TOFU process.

                     In the TOFU model, policies are associated with  bindings
                     between  keys  and  email  addresses (which are extracted
                     from user ids and normalized).  There are five  policies,
                     which can be set manually using the [1m--tofu-policy [22moption.
                     The  default  policy can be set using the [1m--tofu-default-[0m
                     [1mpolicy [22moption.

                     The TOFU policies are: [1mauto[22m, [1mgood[22m, [1munknown[22m, [1mbad [22mand  [1mask[22m.
                     The  [1mauto [22mpolicy is used by default (unless overridden by
                     [1m--tofu-default-policy[22m) and marks a binding as  marginally
                     trusted.  The [1mgood[22m, [1munknown [22mand [1mbad [22mpolicies mark a bind‚Äê
                     ing  as fully trusted, as having unknown trust or as hav‚Äê
                     ing trust never, respectively.   The  [1munknown  [22mpolicy  is
                     useful  for  just  using TOFU to detect conflicts, but to
                     never assign positive trust to a binding.  The final pol‚Äê
                     icy, [1mask [22mprompts  the  user  to  indicate  the  binding's
                     trust.  If batch mode is enabled (or input is inappropri‚Äê
                     ate  in  the  context), then the user is not prompted and
                     the [1mundefined [22mtrust level is returned.

              [1mtofu+pgp[0m
                     This experimental trust model combines TOFU with the  Web
                     of  Trust.  This is done by computing the trust level for
                     each model and then taking the maximum trust level  where
                     the  trust levels are ordered as follows: [1munknown < unde‚Äê[0m
                     [1mfined < marginal < fully < ultimate < expired < never[22m.

                     By setting [1m--tofu-default-policy=unknown[22m, this model  can
                     be  used  to  implement the web of trust with TOFU's con‚Äê
                     flict detection algorithm, but without its assignment  of
                     positive  trust  values,  which  some  security-conscious
                     users don't like.

              [1mdirect [22mKey validity is set directly by the user and  not  calcu‚Äê
                     lated  via  the Web of Trust.  This model is solely based
                     on the key and does not distinguish user IDs.  Note  that
                     when changing to another trust model the trust values as‚Äê
                     signed  to  a key are transformed into ownertrust values,
                     which also indicate how you trust the owner of the key to
                     sign other keys.

              [1malways [22mSkip key validation and assume that used keys are  always
                     fully  valid. You generally won't use this unless you are
                     using some external validation scheme. This  option  also
                     suppresses  the  "[uncertain]" tag printed with signature
                     checks when there is no evidence  that  the  user  ID  is
                     bound  to the key.  Note that this trust model still does
                     not allow the use of expired, revoked, or disabled keys.

              [1mauto   [22mSelect the trust model depending on whatever the internal
                     trust database says. This is the default model if such  a
                     database already exists.  Note that a tofu trust model is
                     not considered here and must be enabled explicitly.

       [1m--always-trust[0m
              Identical to [1m--trust-model always[22m.

       [1m--assert-signer [4m[22mfpr_or_file[0m
              This  option  checks  whether  at least one valid signature on a
              file has been made with the specified key.  The  key  is  either
              specified  as a fingerprint or a file listing fingerprints.  The
              fingerprint must be given or listed in compact format (no colons
              or spaces in between).  This option can be given multiple  times
              and  each fingerprint is checked against the signing key as well
              as the corresponding primary key.  If  [4mfpr_or_file[24m  specifies  a
              file, empty lines are ignored as well as all lines starting with
              a  hash sign.  With this option gpg is guaranteed to return with
              an exit code of 0 if and only if a signature  has  been  encoun‚Äê
              tered,  is  valid,  and  the key matches one of the fingerprints
              given by this option.

       [1m--assert-pubkey-algo [4m[22malgolist[0m
              During data signature verification this options  checks  whether
              the  used  public  key algorithm matches the algorithms given by
              [4malgolist[24m.  This option can be given multiple times  to  concate‚Äê
              nate  more algorithms to the list; the delimiter of the list are
              either commas or spaces.

              The algorithm names given in the list  may  either  be  verbatim
              names like "ed25519" with an optional leading single equal sign,
              or being prefixed with ">", ">=", "<=", or "<".  That prefix op‚Äê
              erator  is applied to the number part of the algorithm name; for
              example 2048 in "rsa2048" or 384 in "brainpoolP384r1".   If  the
              the  leading non-digits in the name matches, the prefix operator
              is used to compare the number part, a trailing suffix is ignored
              in this case.  For example an algorithm list ">rsa3000, >=brain‚Äê
              pool384r1, =ed25519" allows RSA signatures with more  that  3000
              bits, Brainpool curves 384 and 512, and the ed25519 algorithm.

              With  this  option  gpg  (and also gpgv) is guaranteed to return
              with an exit code of 0 if and only if all  valid  signatures  on
              data are made using a matching algorithm from the given list.

       [1m--auto-key-locate [4m[22mmechanisms[0m
       [1m--no-auto-key-locate[0m
              GnuPG can automatically locate and retrieve keys as needed using
              this  option.   This happens when encrypting to an email address
              (in the "user@example.com" form), and there are  no  "user@exam‚Äê
              ple.com"  keys on the local keyring.  This option takes any num‚Äê
              ber of the mechanisms listed below, in the order they are to  be
              tried.  Instead of listing the mechanisms as comma delimited ar‚Äê
              guments,  the option may also be given several times to add more
              mechanism.  The option  [1m--no-auto-key-locate  [22mor  the  mechanism
              "clear" resets the list.  The default is "local,wkd".

              [1mcert   [22mLocate a key using DNS CERT, as specified in RFC-4398.

              [1mdane   [22mLocate a key using DANE, as specified in draft-ietf-dane-
                     openpgpkey-05.txt.

              [1mwkd    [22mLocate a key using the Web Key Directory protocol.

              [1mldap   [22mUsing DNS Service Discovery, check the domain in question
                     for  any  LDAP keyservers to use.  If this fails, attempt
                     to locate the key  using  the  PGP  Universal  method  of
                     checking ‚Äòldap://keys.(thedomain)‚Äô.

              [1mntds   [22mLocate the key using the Active Directory (Windows only).
                     This  method also allows one to search by fingerprint us‚Äê
                     ing the command [1m--locate-external-key[22m.   Note  that  this
                     mechanism  is actually a shortcut for the mechanism ‚Äòkey‚Äê
                     server‚Äô but using "ldap:///" as the keyserver.

              [1mkeyserver[0m
                     Locate a key using a keyserver.  This method also  allows
                     one  to search by fingerprint using the command [1m--locate-[0m
                     [1mexternal-key [22mif any of the configured  keyservers  is  an
                     LDAP server.

              [1mkeyserver-URL[0m
                     In  addition, a keyserver URL as used in the [1mdirmngr [22mcon‚Äê
                     figuration may be used here to query that particular key‚Äê
                     server.  This method also allows one to search by finger‚Äê
                     print using the command [1m--locate-external-key [22mif the  URL
                     specifies an LDAP server.

              [1mlocal  [22mLocate  the key using the local keyrings.  This mechanism
                     allows the user to select the order a local key lookup is
                     done.  Thus using ‚Äò--auto-key-locate local‚Äô is  identical
                     to [1m--no-auto-key-locate[22m.

              [1mnodefault[0m
                     This  flag  disables  the standard local key lookup, done
                     before any of the mechanisms defined by  the  [1m--auto-key-[0m
                     [1mlocate  [22mare tried.  The position of this mechanism in the
                     list does not matter.  It is not  required  if  [1mlocal  [22mis
                     also used.

              [1mclear  [22mClear all defined mechanisms.  This is useful to override
                     mechanisms given in a config file.  Note that a [1mnodefault[0m
                     in [4mmechanisms[24m will also be cleared unless it is given af‚Äê
                     ter the [1mclear[22m.

       [1m--auto-key-import[0m
       [1m--no-auto-key-import[0m
              This  is an offline mechanism to get a missing key for signature
              verification and for later encryption to this key.  If this  op‚Äê
              tion  is  enabled and a signature includes an embedded key, that
              key is used to verify the signature and on verification  success
              the key is imported. The default is [1m--no-auto-key-import[22m.

              On  the  sender  (signing)  site  the option [1m--include-key-block[0m
              needs to be used to put the public part of the  signing  key  as
              ‚ÄúKey Block subpacket‚Äù into the signature.

       [1m--auto-key-retrieve[0m
       [1m--no-auto-key-retrieve[0m
              These options enable or disable the automatic retrieving of keys
              from a keyserver when verifying signatures made by keys that are
              not  on  the  local  keyring.   The default is [1m--no-auto-key-re‚Äê[0m
              [1mtrieve[22m.

              The order of methods tried to lookup the key is:

              1. If the option [1m--auto-key-import [22mis set and the signatures in‚Äê
              cludes an embedded key, that key is used to verify the signature
              and on verification success that key is imported.

              2. If a preferred keyserver is specified in  the  signature  and
              the  option  [1mhonor-keyserver-url [22mis active (which is not the de‚Äê
              fault), that keyserver is tried.  Note that the creator  of  the
              signature  uses  the  option  [1m--sig-keyserver-url [22mto specify the
              preferred keyserver for data signatures.

              3. If the  signature  has  the  Signer's  UID  set  (e.g.  using
              [1m--sender [22mwhile creating the signature) a Web Key Directory (WKD)
              lookup  is  done.   This is the default configuration but can be
              disabled by removing WKD from the auto-key-locate list or by us‚Äê
              ing the option [1m--disable-signer-uid[22m.

              4. If any keyserver is configured and the Issuer Fingerprint  is
              part  of the signature (since GnuPG 2.1.16), the configured key‚Äê
              servers are tried.

              Note that this option makes a "web bug" like behavior  possible.
              Keyserver  or Web Key Directory operators can see which keys you
              request, so by sending you a message signed by a brand  new  key
              (which  you  naturally will not have on your local keyring), the
              operator can tell both your IP address and  the  time  when  you
              verified the signature.

       [1m--keyid-format {none|short|0xshort|long|0xlong}[0m
              Select  how to display key IDs.  "none" does not show the key ID
              at all but shows the fingerprint in a separate line.  "short" is
              the traditional 8-character key ID.  "long" is the more accurate
              (but less convenient) 16-character key ID.  Add an "0x"  to  ei‚Äê
              ther  to  include  an "0x" at the beginning of the key ID, as in
              0x99242560.  Note that this option  is  ignored  if  the  option
              [1m--with-colons [22mis used.

       [1m--keyserver [4m[22mname[0m
              This option is deprecated - please use the [1m--keyserver [22min ‚Äò[4mdirm‚Äê[0m
              [4mngr.conf[24m‚Äô instead.

              Use  [4mname[24m  as your keyserver. This is the server that [1m--receive-[0m
              [1mkeys[22m, [1m--send-keys[22m, and [1m--search-keys [22mwill  communicate  with  to
              receive  keys  from,  send  keys to, and search for keys on. The
              format of the [4mname[24m is a  URI:  `scheme:[//]keyservername[:port]'
              The  scheme  is the type of keyserver: "hkp"/"hkps" for the HTTP
              (or compatible) keyservers or "ldap"/"ldaps" for the  LDAP  key‚Äê
              servers.   Note  that  your particular installation of GnuPG may
              have other keyserver types available as well. Keyserver  schemes
              are case-insensitive.

              Most  keyservers synchronize with each other, so there is gener‚Äê
              ally no need to send keys to more than one server. The keyserver
              [1mhkp://keys.gnupg.net [22muses round robin DNS to  give  a  different
              keyserver each time you use it.

       [1m--keyserver-options {[4m[22mname[24m=[4mvalue[24m}
              This is a space or comma delimited string that gives options for
              the  keyserver. Options can be prefixed with a `no-' to give the
              opposite meaning. Valid import-options or export-options may  be
              used  here as well to apply to importing ([1m--recv-key[22m) or export‚Äê
              ing ([1m--send-key[22m) a key from a keyserver. While not  all  options
              are available for all keyserver types, some common options are:

              [1minclude-revoked[0m
                     When searching for a key with [1m--search-keys[22m, include keys
                     that  are  marked  on the keyserver as revoked. Note that
                     not all keyservers differentiate between revoked and  un‚Äê
                     revoked  keys,  and  for  such  keyservers this option is
                     meaningless. Note also that most keyservers do  not  have
                     cryptographic  verification  of  key  revocations, and so
                     turning this option off may result in skipping keys  that
                     are incorrectly marked as revoked.

              [1minclude-disabled[0m
                     When searching for a key with [1m--search-keys[22m, include keys
                     that  are  marked on the keyserver as disabled. Note that
                     this option is not used with HKP keyservers.

              [1mauto-key-retrieve[0m
                     This is an obsolete alias  for  the  option  [1mauto-key-re‚Äê[0m
                     [1mtrieve[22m.   Please do not use it; it will be removed in fu‚Äê
                     ture versions..

              [1mhonor-keyserver-url[0m
                     When using [1m--refresh-keys[22m, if the key in question  has  a
                     preferred  keyserver  URL,  then  use that preferred key‚Äê
                     server to refresh the key from. In addition, if auto-key-
                     retrieve is set, and the signature being verified  has  a
                     preferred  keyserver  URL,  then  use that preferred key‚Äê
                     server to fetch the key from. Note that this  option  in‚Äê
                     troduces a "web bug": The creator of the key can see when
                     the  keys  is refreshed.  Thus this option is not enabled
                     by default.

              [1minclude-subkeys[0m
                     When receiving a key, include subkeys as  potential  tar‚Äê
                     gets.  Note  that  this  option is not used with HKP key‚Äê
                     servers, as they do not support retrieving keys by subkey
                     id.

              [1mtimeout[0m
              [1mhttp-proxy=[4m[22mvalue[0m
              [1mverbose[0m
              [1mdebug[0m
              [1mcheck-cert[0m

              [1mca-cert-file[0m
                     These options have no more function since GnuPG 2.1.  Use
                     the [1mdirmngr [22mconfiguration options instead.

       The default list of options is: "self-sigs-only,  repair-keys,  repair-
       pks-subkey-bug,  export-attributes". However, if the actual used source
       is an LDAP server "no-self-sigs-only"  is  assumed  unless  "self-sigs-
       only" has been explicitly configured.

       [1m--completes-needed [4m[22mn[0m
              Number of completely trusted users to introduce a new key signer
              (defaults to 1).

       [1m--marginals-needed [4m[22mn[0m
              Number of marginally trusted users to introduce a new key signer
              (defaults to 3)

       [1m--tofu-default-policy {auto|good|unknown|bad|ask}[0m
              The  default  TOFU policy (defaults to [1mauto[22m).  For more informa‚Äê
              tion about the meaning of this option, see: [trust-model-tofu].

       [1m--max-cert-depth [4m[22mn[0m
              Maximum depth of a certification chain (default is 5).

       [1m--no-sig-cache[0m
              Do not cache the verification status of key signatures.  Caching
              gives a much better performance in key listings. However, if you
              suspect that your public keyring is not safe against write modi‚Äê
              fications, you can use this option to disable  the  caching.  It
              probably  does  not make sense to disable it because all kind of
              damage can be done if someone else has write access to your pub‚Äê
              lic keyring.

       [1m--auto-check-trustdb[0m
       [1m--no-auto-check-trustdb[0m
              If GnuPG feels that its information about the Web of  Trust  has
              to be updated, it automatically runs the [1m--check-trustdb [22mcommand
              internally.   This  may  be a time consuming process. [1m--no-auto-[0m
              [1mcheck-trustdb [22mdisables this option.

       [1m--use-agent[0m
       [1m--no-use-agent[0m
              This is dummy option. [1mgpg [22malways requires the agent.

       [1m--gpg-agent-info[0m
              This is dummy option. It has no effect when used with [1mgpg[22m.

       [1m--agent-program [4m[22mfile[0m
              Specify an agent program to be used for secret  key  operations.
              The  default value is determined by running [1mgpgconf [22mwith the op‚Äê
              tion [1m--list-dirs[22m.  Note that the pipe symbol ([1m|[22m) is used  for  a
              regression  test suite hack and may thus not be used in the file
              name.

       [1m--dirmngr-program [4m[22mfile[0m
              Specify a dirmngr program to be used for keyserver access.   The
              default value is ‚Äò[4m/usr/bin/dirmngr[24m‚Äô.

       [1m--disable-dirmngr[0m
              Entirely disable the use of the Dirmngr.

       [1m--no-autostart[0m
              Do not start the gpg-agent or the dirmngr if it has not yet been
              started and its service is required.  This option is mostly use‚Äê
              ful on machines where the connection to gpg-agent has been redi‚Äê
              rected  to  another machines.  If dirmngr is required on the re‚Äê
              mote machine, it may be started manually using [1mgpgconf  --launch[0m
              [1mdirmngr[22m.

       [1m--lock-once[0m
              Lock the databases the first time a lock is requested and do not
              release the lock until the process terminates.

       [1m--lock-multiple[0m
              Release  the  locks  every  time a lock is no longer needed. Use
              this to override a previous [1m--lock-once [22mfrom a config file.

       [1m--lock-never[0m
              Disable locking entirely. This option should  be  used  only  in
              very special environments, where it can be assured that only one
              process  is  accessing  those  files.  A  bootable floppy with a
              stand-alone encryption system will probably use  this.  Improper
              usage of this option may lead to data and key corruption.

       [1m--exit-on-status-write-error[0m
              This  option will cause write errors on the status FD to immedi‚Äê
              ately terminate the process. That should in fact be the  default
              but  it  never worked this way and thus we need an option to en‚Äê
              able this, so that the change  won't  break  applications  which
              close  their  end of a status fd connected pipe too early. Using
              this option along with [1m--enable-progress-filter [22mmay be  used  to
              cleanly cancel long running gpg operations.

       [1m--limit-card-insert-tries [4m[22mn[0m
              With  [4mn[24m  greater than 0 the number of prompts asking to insert a
              smartcard gets limited to N-1. Thus with a value of 1 gpg  won't
              at  all  ask  to  insert  a  card  if  none has been inserted at
              startup. This option is useful in the configuration file in case
              an application does not know about  the  smartcard  support  and
              waits ad infinitum for an inserted card.

       [1m--no-random-seed-file[0m
              GnuPG uses a file to store its internal random pool over invoca‚Äê
              tions.   This  makes random generation faster; however sometimes
              write operations are not desired. This option  can  be  used  to
              achieve that with the cost of slower random generation.

       [1m--no-greeting[0m
              Suppress the initial copyright message.

       [1m--no-secmem-warning[0m
              Suppress the warning about "using insecure memory".

       [1m--no-permission-warning[0m
              Suppress  the  warning  about  unsafe  file  and  home directory
              ([1m--homedir[22m) permissions. Note that the  permission  checks  that
              GnuPG  performs are not intended to be authoritative, but rather
              they simply warn about certain common  permission  problems.  Do
              not  assume that the lack of a warning means that your system is
              secure.

              Note that the warning for unsafe [1m--homedir [22mpermissions cannot be
              suppressed in the gpg.conf file, as this would allow an attacker
              to place an unsafe gpg.conf file in place, and use this file  to
              suppress  warnings about itself. The [1m--homedir [22mpermissions warn‚Äê
              ing may only be suppressed on the command line.

       [1m--require-secmem[0m
       [1m--no-require-secmem[0m
              Refuse to run if GnuPG cannot get secure memory. Defaults to  no
              (i.e. run, but give a warning).

       [1m--require-cross-certification[0m
       [1m--no-require-cross-certification[0m
              When  verifying  a signature made from a subkey, ensure that the
              cross certification "back signature" on the  subkey  is  present
              and  valid.   This protects against a subtle attack against sub‚Äê
              keys that can sign.  Defaults  to  [1m--require-cross-certification[0m
              for [1mgpg[22m.

       [1m--expert[0m
       [1m--no-expert[0m
              Allow  the user to do certain nonsensical or "silly" things like
              signing an expired or revoked key, or certain potentially incom‚Äê
              patible things like generating unusual key types. This also dis‚Äê
              ables certain warning messages  about  potentially  incompatible
              actions.  As  the name implies, this option is for experts only.
              If you don't fully understand the implications of what it allows
              you to do, leave this off. [1m--no-expert [22mdisables this option.

   [1mKey related options[0m

       [1m--recipient [4m[22mname[0m
       [1m-r     [22mEncrypt for user id [4mname[24m. If this option  or  [1m--hidden-recipient[0m
              is  not  specified, GnuPG asks for the user-id unless [1m--default-[0m
              [1mrecipient [22mis given.

       [1m--hidden-recipient [4m[22mname[0m
       [1m-R     [22mEncrypt for user ID [4mname[24m, but hide the key  ID  of  this  user's
              key.  This  option helps to hide the receiver of the message and
              is a limited countermeasure against traffic  analysis.  If  this
              option  or [1m--recipient [22mis not specified, GnuPG asks for the user
              ID unless [1m--default-recipient [22mis given.

       [1m--recipient-file [4m[22mfile[0m
       [1m-f     [22mThis option is similar to [1m--recipient [22mexcept that it encrypts to
              a key stored in the given file.  [4mfile[24m must be the name of a file
              containing exactly one key.  [1mgpg [22massumes that the  key  in  this
              file is fully valid.

       [1m--hidden-recipient-file [4m[22mfile[0m
       [1m-F     [22mThis  option is similar to [1m--hidden-recipient [22mexcept that it en‚Äê
              crypts to a key stored in the given file.  [4mfile[24m must be the name
              of a file containing exactly one key.  [1mgpg [22massumes that the  key
              in this file is fully valid.

       [1m--encrypt-to [4m[22mname[0m
              Same  as [1m--recipient [22mbut this one is intended for use in the op‚Äê
              tions file and may be used with your own user-id as an "encrypt-
              to-self". These keys are only used when there are other  recipi‚Äê
              ents given either by use of [1m--recipient [22mor by the asked user id.
              No  trust checking is performed for these user ids and even dis‚Äê
              abled keys can be used.

       [1m--hidden-encrypt-to [4m[22mname[0m
              Same as [1m--hidden-recipient [22mbut this one is intended for  use  in
              the options file and may be used with your own user-id as a hid‚Äê
              den  "encrypt-to-self".  These keys are only used when there are
              other recipients given either by use of [1m--recipient  [22mor  by  the
              asked  user  id.   No trust checking is performed for these user
              ids and even disabled keys can be used.

       [1m--no-encrypt-to[0m
              Disable the use  of  all  [1m--encrypt-to  [22mand  [1m--hidden-encrypt-to[0m
              keys.

       [1m--group {[4m[22mname[24m=[4mvalue[24m}
              Sets up a named group, which is similar to aliases in email pro‚Äê
              grams.   Any time the group name is a recipient ([1m-r [22mor [1m--recipi‚Äê[0m
              [1ment[22m), it will be expanded  to  the  values  specified.  Multiple
              groups with the same name are automatically merged into a single
              group.

              The  values are [1mkey IDs [22mor fingerprints, but any key description
              is accepted. Note that a value with spaces in it will be treated
              as two different values. Note also there is only  one  level  of
              expansion  ---  you  cannot make an group that points to another
              group. When used from the command line, it may be  necessary  to
              quote  the  argument  to  this  option to prevent the shell from
              treating it as multiple arguments.

       [1m--ungroup [4m[22mname[0m
              Remove a given entry from the [1m--group [22mlist.

       [1m--no-groups[0m
              Remove all entries from the [1m--group [22mlist.

       [1m--local-user [4m[22mname[0m
       [1m-u     [22mUse [4mname[24m as the key to sign with. Note that  this  option  over‚Äê
              rides [1m--default-key[22m.

       [1m--sender [4m[22mmbox[0m
              This  option  has  two purposes.  [4mmbox[24m must either be a complete
              user ID containing a proper mail address or just  a  plain  mail
              address.  The option can be given multiple times.

              When  creating  a  signature  this  option tells gpg the signing
              key's user id used to make the signature and embeds that user ID
              into the created signature (using OpenPGP's ``Signer's User ID''
              subpacket).  If the option is given multiple  times  a  suitable
              user  ID  is  picked.  However, if the signing key was specified
              directly by using a mail address (i.e. not by  using  a  finger‚Äê
              print or key ID) this option is used and the mail address is em‚Äê
              bedded in the created signature.

              When verifying a signature [4mmbox[24m is used to restrict the informa‚Äê
              tion  printed by the TOFU code to matching user IDs.  If the op‚Äê
              tion is used and the signature contains a ``Signer's  User  ID''
              subpacket  that  information  is  is  also  used to restrict the
              printed information.  Note that GnuPG considers  only  the  mail
              address part of a User ID.

              If  this  option  or  the  said subpacket is available the TRUST
              lines as printed by option [1mstatus-fd [22mcorrespond  to  the  corre‚Äê
              sponding  User  ID;  if  no User ID is known the TRUST lines are
              computed directly on the key and do  not  give  any  information
              about the User ID.  In the latter case it his highly recommended
              to  scripts  and  other frontends to evaluate the VALIDSIG line,
              retrieve the key and print all User IDs along with their  valid‚Äê
              ity (trust) information.

       [1m--try-secret-key [4m[22mname[0m
              For  hidden  recipients  GPG  needs  to know the keys to use for
              trial decryption.  The key  set  with  [1m--default-key  [22mis  always
              tried  first, but this is often not sufficient.  This option al‚Äê
              lows setting more keys to be used  for  trial  decryption.   Al‚Äê
              though  any  valid user-id specification may be used for [4mname[24m it
              makes sense to use at least the long keyid to avoid ambiguities.
              Note that gpg-agent might pop up a pinentry for a lot keys to do
              the trial decryption.  If you want to stop all further trial de‚Äê
              cryption you may use close-window button instead of  the  cancel
              button.

       [1m--try-all-secrets[0m
              Don't  look  at  the key ID as stored in the message but try all
              secret keys in turn to find the right decryption key.  This  op‚Äê
              tion  forces the behaviour as used by anonymous recipients (cre‚Äê
              ated by using [1m--throw-keyids [22mor  [1m--hidden-recipient[22m)  and  might
              come  handy  in case where an encrypted message contains a bogus
              key ID.

       [1m--skip-hidden-recipients[0m
       [1m--no-skip-hidden-recipients[0m
              During decryption skip all anonymous  recipients.   This  option
              helps  in the case that people use the hidden recipients feature
              to hide their own encrypt-to key from others.  If one  has  many
              secret  keys this may lead to a major annoyance because all keys
              are tried in turn to decrypt something which was not really  in‚Äê
              tended  for  it.  The drawback of this option is that it is cur‚Äê
              rently not possible to decrypt a  message  which  includes  real
              anonymous recipients.

   [1mInput and Output[0m

       [1m--armor[0m
       [1m-a     [22mCreate  ASCII  armored output.  The default is to create the bi‚Äê
              nary OpenPGP format.

       [1m--no-armor[0m
              Assume the input data is not in ASCII armored format.

       [1m--output [4m[22mfile[0m
       [1m-o [4m[22mfile[0m
              Write output to [4mfile[24m.  To write to stdout use [1m- [22mas the filename.

       [1m--max-output [4m[22mn[0m
              This option sets a limit on the number of  bytes  that  will  be
              generated when processing a file. Since OpenPGP supports various
              levels  of  compression,  it is possible that the plaintext of a
              given message may be  significantly  larger  than  the  original
              OpenPGP  message. While GnuPG works properly with such messages,
              there is often a desire to set a maximum file size that will  be
              generated  before processing is forced to stop by the OS limits.
              Defaults to 0, which means "no limit".

       [1m--chunk-size [4m[22mn[0m
              The AEAD encryption mode encrypts the data in chunks so  that  a
              receiving side can check for transmission errors or tampering at
              the  end of each chunk and does not need to delay this until all
              data has been received.  The used chunk size is 2^[4mn[24m  byte.   The
              lowest allowed value for [4mn[24m is 6 (64 byte) and the largest is the
              default of 22 which creates chunks not larger than 4 MiB.

       [1m--input-size-hint [4m[22mn[0m
              This  option  can be used to tell GPG the size of the input data
              in bytes.  [4mn[24m must be a positive base-10 number.  This option  is
              only  useful if the input is not taken from a file.  GPG may use
              this hint to optimize its buffer  allocation  strategy.   It  is
              also  used  by  the  [1m--status-fd  [22mline ``PROGRESS'' to provide a
              value for ``total'' if that is not available by other means.

       [1m--key-origin [4m[22mstring[24m[,[4murl[24m]
              gpg can track the origin of a key. Certain origins  are  implic‚Äê
              itly  known  (e.g. keyserver, web key directory) and set.  For a
              standard import the origin of the keys imported can be set  with
              this option.  To list the possible values use "help" for [4mstring[24m.
              Some  origins  can store an optional [4murl[24m argument.  That URL can
              appended to [4mstring[24m after a comma.

       [1m--import-options [4m[22mparameters[0m
              This is a space or comma delimited string that gives options for
              importing keys. Options can be prepended with a  `no-'  to  give
              the opposite meaning. The options are:

              [1mimport-local-sigs[0m
                     Allow importing key signatures marked as "local". This is
                     not  generally  useful  unless a shared keyring scheme is
                     being used.  Defaults to no.

              [1mkeep-ownertrust[0m
                     Normally possible still existing ownertrust values  of  a
                     key are cleared if a key is imported.  This is in general
                     desirable  so  that a formerly deleted key does not auto‚Äê
                     matically gain an ownertrust values merely due to import.
                     On the other hand it is sometimes necessary to  re-import
                     a  trusted set of keys again but keeping already assigned
                     ownertrust values.  This can be achieved  by  using  this
                     option.

              [1mrepair-pks-subkey-bug[0m
                     During import, attempt to repair the damage caused by the
                     PKS  keyserver  bug (pre version 0.9.6) that mangles keys
                     with multiple subkeys. Note that this  cannot  completely
                     repair the damaged key as some crucial data is removed by
                     the  keyserver,  but  it  does at least give you back one
                     subkey. Defaults to no for regular [1m--import  [22mand  to  yes
                     for keyserver [1m--receive-keys[22m.

              [1mimport-show[0m
              [1mshow-only[0m
                     Show  a listing of the key as imported right before it is
                     stored.  This can be combined with the  option  [1m--dry-run[0m
                     to  only look at keys; the option [1mshow-only [22mis a shortcut
                     for this combination.  The command [1m--show-keys [22mis another
                     shortcut for this.  Note that suffixes like '#' for "sec"
                     and "sbb" lines may or may not be printed.

              [1mimport-export[0m
                     Run the entire import code but instead of storing the key
                     to the local keyring write it to the output.  The  export
                     option  [1mexport-dane  [22maffect  the output.  This option can
                     for example be used to remove all invalid  parts  from  a
                     key without the need to store it.

              [1mmerge-only[0m
                     During import, allow key updates to existing keys, but do
                     not allow any new keys to be imported. Defaults to no.

              [1mimport-clean[0m
                     After  import,  compact (remove all signatures except the
                     self-signature) any user IDs from the new  key  that  are
                     not usable.  Then, remove any signatures from the new key
                     that  are not usable.  This includes signatures that were
                     issued by keys that are not present on the keyring.  This
                     option  is  the  same  as  running the [1m--edit-key [22mcommand
                     "clean" after import. Defaults to no.

              [1mself-sigs-only[0m
                     Accept only self-signatures while importing a  key.   All
                     other  key  signatures  are  skipped  at  an early import
                     stage.  This option can be used with [1mkeyserver-options [22mto
                     mitigate attempts to flood a key  with  bogus  signatures
                     from  a  keyserver.  The drawback is that all other valid
                     key signatures, as required by the Web of Trust are  also
                     not  imported.   Note  that  when using this option along
                     with import-clean it suppresses the final clean step  af‚Äê
                     ter merging the imported key into the existing key.

              [1mignore-attributes[0m
                     Ignore  all attribute user IDs (photo IDs) and their sig‚Äê
                     natures while importing a key.

              [1mrepair-keys[0m
                     After import, fix various problems with  the  keys.   For
                     example,  this  reorders signatures, and strips duplicate
                     signatures.  Defaults to yes.

              [1mbulk-import[0m
                     When  used  the  keyboxd  (option  [1muse-keyboxd  [22min  ‚Äò[4mcom‚Äê[0m
                     [4mmon.conf[24m‚Äô) does the import within a single transaction.

              [1mimport-minimal[0m
                     Import the smallest key possible. This removes all signa‚Äê
                     tures  except the most recent self-signature on each user
                     ID. This option is the same  as  running  the  [1m--edit-key[0m
                     command "minimize" after import.  Defaults to no.

              [1mrestore[0m
              [1mimport-restore[0m
                     Import  in key restore mode.  This imports all data which
                     is usually skipped during  import;  including  all  GnuPG
                     specific data.  All other contradicting options are over‚Äê
                     ridden.

       [1m--import-filter {[4m[22mname[24m=[4mexpr[24m}
       [1m--export-filter {[4m[22mname[24m=[4mexpr[24m}
              These  options  define an import/export filter which are applied
              to the  imported/exported  keyblock  right  before  it  will  be
              stored/written.   [4mname[24m  defines  the type of filter to use, [4mexpr[0m
              the expression to evaluate.  The  option  can  be  used  several
              times which then appends more expression to the same [4mname[24m.

              The available filter types are:

              [1mkeep-uid[0m
                     This  filter will keep a user id packet and its dependent
                     packets in the keyblock if the  expression  evaluates  to
                     true.

              [1mdrop-subkey[0m
                     This  filter  drops the selected subkeys.  Currently only
                     implemented for --export-filter.

              [1mdrop-sig[0m
                     This filter drops the selected  key  signatures  on  user
                     ids.  Self-signatures are not considered.  Currently only
                     implemented for --import-filter.

              [1mselect [22mThis  filter  is  only implemented by [1m--list-filter[22m.  All
                     property names may be used.

       For the syntax of the expression see the chapter "FILTER  EXPRESSIONS".
       The property names for the expressions depend on the actual filter type
       and are indicated in the following table.  Note that all property names
       may also be used by [1m--list-filter[22m.

       Property  names may be prefix with a scope delimited by a slash.  Valid
       scopes are "pub" for public and secret primary keys, "sub"  for  public
       and secret subkeys, "uid" for for user-ID packets, and "sig" for signa‚Äê
       ture packets.  Invalid scopes are currently ignored.

       The available properties are:

              [1muid    [22mA string with the user id.  (keep-uid)

              [1mmbox   [22mThe addr-spec part of a user id with mailbox or the empty
                     string.  (keep-uid)

              [1malgostr[0m
                     A string with the key algorithm description.  For example
                     "rsa3072" or "ed25519".

              [1mkey_algo[0m
                     A number with the public key algorithm of a key or subkey
                     packet.  (drop-subkey)

              [1mkey_size[0m
                     A  number  with the effective key size of a key or subkey
                     packet.  (drop-subkey)

              [1mkey_created[0m
              [1mkey_created_d[0m
                     The first is the timestamp a public key or subkey  packet
                     was  created.  The second is the same but given as an ISO
                     string, e.g. "2016-08-17". (drop-subkey)

              [1mkey_expires[0m
              [1mkey_expires_d[0m
                     The expiration time of a public key or subkey or 0 if  it
                     does  not expire.  The second is the same but given as an
                     ISO date string or an empty string e.g. "2038-01-19".

              [1mfpr    [22mThe hexified fingerprint of the current subkey or primary
                     key.  (drop-subkey)

              [1mprimary[0m
                     Boolean indicating whether the user  id  is  the  primary
                     one.  (keep-uid)

              [1mexpired[0m
                     Boolean  indicating  whether  a user id (keep-uid), a key
                     (drop-subkey), or a signature (drop-sig) expired.

              [1mrevoked[0m
                     Boolean indicating whether a user id (keep-uid) or a  key
                     (drop-subkey) has been revoked.

              [1mdisabled[0m
                     Boolean indicating whether a primary key is disabled.

              [1msecret [22mBoolean  indicating  whether  a key or subkey is a secret
                     one.  (drop-subkey)

              [1musage  [22mA string indicating the usage flags for the subkey,  from
                     the sequence ``ecsa?''.  For example, a subkey capable of
                     just  signing  and authentication would be an exact match
                     for ``sa''. (drop-subkey)

              [1msig_created[0m
              [1msig_created_d[0m
                     The first is the timestamp a signature  packet  was  cre‚Äê
                     ated.   The  second  is the same but given as an ISO date
                     string, e.g. "2016-08-17". (drop-sig)

              [1msig_expires[0m
              [1msig_expires_d[0m
                     The expiration time of a signature packet or 0 if it does
                     not expire.  The second is the same but given as  an  ISO
                     date string or an empty string e.g. "2038-01-19".

              [1msig_algo[0m
                     A  number  with  the  public key algorithm of a signature
                     packet. (drop-sig)

              [1msig_digest_algo[0m
                     A number with the digest algorithm of a signature packet.
                     (drop-sig)

              [1morigin [22mA string with the key origin or a question mark.  For ex‚Äê
                     ample the string ``wkd'' is used if a key originated from
                     a Web Key Directory lookup.

              [1mlastupd[0m
                     The timestamp the key was last updated from  a  keyserver
                     or the Web Key Directory.

              [1murl    [22mA  string  with  the  the URL associated wit the last key
                     lookup.

       [1m--export-options [4m[22mparameters[0m
              This is a space or comma delimited string that gives options for
              exporting keys.  Options can be prepended with a `no-'  to  give
              the opposite meaning.  The options are:

              [1mexport-local-sigs[0m
                     Allow exporting key signatures marked as "local". This is
                     not  generally  useful  unless a shared keyring scheme is
                     being used.  Defaults to no.

              [1mexport-attributes[0m
                     Include attribute user IDs (photo IDs)  while  exporting.
                     Not including attribute user IDs is useful to export keys
                     that are going to be used by an OpenPGP program that does
                     not accept attribute user IDs.  Defaults to yes.

              [1mexport-sensitive-revkeys[0m
                     Include designated revoker information that was marked as
                     "sensitive". Defaults to no.

              [1mbackup[0m
              [1mexport-backup[0m
                     Export  for  use as a backup.  The exported data includes
                     all data which is needed to restore the key or keys later
                     with GnuPG.  The format is basically the  OpenPGP  format
                     but enhanced with GnuPG specific data.  All other contra‚Äê
                     dicting options are overridden.

              [1mexport-clean[0m
                     Compact  (remove all signatures from) user IDs on the key
                     being exported if the user IDs are not usable.  Also,  do
                     not  export  any signatures that are not usable. This in‚Äê
                     cludes signatures that were issued by keys that  are  not
                     present  on  the keyring. This option is the same as run‚Äê
                     ning the [1m--edit-key [22mcommand "clean" before export  except
                     that  the local copy of the key is not modified. Defaults
                     to no.

              [1mexport-minimal[0m
                     Export the smallest key possible. This removes all signa‚Äê
                     tures except the most recent self-signature on each  user
                     ID.  This  option  is  the same as running the [1m--edit-key[0m
                     command "minimize" before export except  that  the  local
                     copy of the key is not modified. Defaults to no.

              [1mexport-revocs[0m
                     Export  only  standalone  revocation  certificates of the
                     key.  This option does  not  export  revocations  of  3rd
                     party certificate revocations.

              [1mexport-dane[0m
                     Instead  of  outputting  the  key material output OpenPGP
                     DANE records suitable to put into  DNS  zone  files.   An
                     ORIGIN  line  is  printed before each record to allow di‚Äê
                     verting the records to the corresponding zone file.

              [1mmode1003[0m
                     Enable the use of a new secret key export  format.   This
                     format avoids the re-encryption as required with the cur‚Äê
                     rent OpenPGP format and also improves the security of the
                     secret  key  if  it has been protected with a passphrase.
                     Note that an unprotected key is exported as-is  and  thus
                     not  secure; the general rule to convey secret keys in an
                     OpenPGP encrypted file  still  applies  with  this  mode.
                     Versions  of  GnuPG  before  2.4.0 are not able to import
                     such a secret file.

       [1m--with-colons[0m
              Print key listings delimited by colons.  Note  that  the  output
              will  be  encoded  in  UTF-8 regardless of any [1m--display-charset[0m
              setting. This format is useful when GnuPG is called from scripts
              and other programs as it is easily machine parsed.  The  details
              of  this  format are documented in the file ‚Äò[4mdoc/DETAILS[24m‚Äô, which
              is included in the GnuPG source distribution.

       [1m--fixed-list-mode[0m
              Do not merge primary user ID and  primary  key  in  [1m--with-colon[0m
              listing   mode   and  print  all  timestamps  as  seconds  since
              1970-01-01.  Since GnuPG 2.0.10, this mode is  always  used  and
              thus this option is obsolete; it does not harm to use it though.

       [1m--legacy-list-mode[0m
              Revert  to  the pre-2.1 public key list mode.  This only affects
              the human readable output and not the  machine  interface  (i.e.
              [1m--with-colons[22m).   Note  that  the  legacy format does not convey
              suitable information for elliptic curves.

       [1m--with-fingerprint[0m
              Same as the command [1m--fingerprint [22mbut changes only the format of
              the output and may be used together with another command.

       [1m--with-subkey-fingerprint[0m
              If a fingerprint is printed for the  primary  key,  this  option
              forces  printing of the fingerprint for all subkeys.  This could
              also be achieved by using the [1m--with-fingerprint  [22mtwice  but  by
              using  this option along with keyid-format "none" a compact fin‚Äê
              gerprint is printed.

       [1m--with-v5-fingerprint[0m
              In a colon mode listing emit "fp2" lines for version  4  OpenPGP
              keys having a v5 style fingerprint of the key.

       [1m--with-icao-spelling[0m
              Print  the  ICAO  spelling of the fingerprint in addition to the
              hex digits.

       [1m--with-keygrip[0m
              Include the keygrip in the key listings.  In [1m--with-colons  [22mmode
              this is implicitly enable for secret keys.

       [1m--with-key-origin[0m
              Include  the locally held information on the origin and last up‚Äê
              date of a key in a key listing.  In [1m--with-colons [22mmode  this  is
              always  printed.   This data is currently experimental and shall
              not be considered part of the stable API.

       [1m--with-wkd-hash[0m
              Print a Web Key Directory identifier along with each user ID  in
              key listings.  This is an experimental feature and semantics may
              change.

       [1m--with-secret[0m
              Include  info  about  the presence of a secret key in public key
              listings done with [1m--with-colons[22m.

   [1mOpenPGP protocol specific options[0m

       [1m-t, --textmode[0m
       [1m--no-textmode[0m
              Treat input files as text and store them in the OpenPGP  canoni‚Äê
              cal  text form with standard "CRLF" line endings. This also sets
              the necessary flags to inform the recipient that  the  encrypted
              or  signed  data is text and may need its line endings converted
              back to whatever the local system uses. This  option  is  useful
              when  communicating  between  two  platforms that have different
              line ending conventions (UNIX-like to Mac, Mac to Windows, etc).
              [1m--no-textmode [22mdisables this option, and is the default.

       [1m--force-v3-sigs[0m
       [1m--no-force-v3-sigs[0m

       [1m--force-v4-certs[0m
       [1m--no-force-v4-certs[0m
              These options are obsolete and have no effect since GnuPG 2.1.

       [1m--force-ocb[0m
       [1m--force-aead[0m
              Force the use of AEAD encryption over MDC encryption.  AEAD is a
              modern and faster way to do authenticated  encryption  than  the
              old  MDC  method.  [1m--force-aead [22mis an alias and deprecated.  See
              also option [1m--chunk-size[22m.

       [1m--force-mdc[0m
       [1m--disable-mdc[0m
              These options are obsolete and have no effect since GnuPG 2.2.8.
              The MDC is always used unless the keys indicate that an AEAD al‚Äê
              gorithm can be used in which case AEAD is used.   But  note:  If
              the  creation  of  a legacy non-MDC message is exceptionally re‚Äê
              quired, the option [1m--rfc2440 [22mallows for this.

       [1m--disable-signer-uid[0m
              By default the user ID of the signing key  is  embedded  in  the
              data  signature.  As of now this is only done if the signing key
              has been specified with [1mlocal-user [22musing a mail address, or with
              [1msender[22m.  This information can be helpful for verifier to  locate
              the key; see option [1m--auto-key-retrieve[22m.

       [1m--include-key-block[0m
       [1m--no-include-key-block[0m
              This  option is used to embed the actual signing key into a data
              signature.  The embedded key is stripped down to a  single  user
              id  and includes only the signing subkey used to create the sig‚Äê
              nature as well as as valid encryption subkeys.  All  other  info
              is removed from the key to keep it and thus the signature small.
              This option is the OpenPGP counterpart to the [1mgpgsm [22moption [1m--in‚Äê[0m
              [1mclude-certs  [22mand allows the recipient of a signed message to re‚Äê
              ply encrypted to the sender without using any online directories
              to lookup the key.  The default is [1m--no-include-key-block[22m.   See
              also the option [1m--auto-key-import[22m.

       [1m--personal-cipher-preferences [4m[22mstring[0m
              Set  the list of personal cipher preferences to [4mstring[24m.  Use [1mgpg[0m
              [1m--version [22mto get a list of available algorithms, and use [1mnone [22mto
              set no preference at all.  This allows the user to safely  over‚Äê
              ride  the  algorithm chosen by the recipient key preferences, as
              GPG will only select an algorithm that is usable by all  recipi‚Äê
              ents.   The  most highly ranked cipher in this list is also used
              for the [1m--symmetric [22mencryption command.

       [1m--personal-digest-preferences [4m[22mstring[0m
              Set the list of personal digest preferences to [4mstring[24m.  Use  [1mgpg[0m
              [1m--version [22mto get a list of available algorithms, and use [1mnone [22mto
              set  no preference at all.  This allows the user to safely over‚Äê
              ride the algorithm chosen by the recipient key  preferences,  as
              GPG  will only select an algorithm that is usable by all recipi‚Äê
              ents.  The most highly ranked digest algorithm in this  list  is
              also  used when signing without encryption (e.g. [1m--clear-sign [22mor
              [1m--sign[22m).

       [1m--personal-compress-preferences [4m[22mstring[0m
              Set the list of personal compression preferences to [4mstring[24m.  Use
              [1mgpg --version [22mto get a list of  available  algorithms,  and  use
              [1mnone  [22mto  set  no  preference  at  all.  This allows the user to
              safely override the algorithm chosen by the recipient key  pref‚Äê
              erences,  as GPG will only select an algorithm that is usable by
              all recipients.  The most highly ranked compression algorithm in
              this list is also used when there are no recipient keys to  con‚Äê
              sider (e.g. [1m--symmetric[22m).

       [1m--s2k-cipher-algo [4m[22mname[0m
              Use [4mname[24m as the cipher algorithm for symmetric encryption with a
              passphrase  if  [1m--personal-cipher-preferences  [22mand [1m--cipher-algo[0m
              are not given.  The default is AES-128.

       [1m--s2k-digest-algo [4m[22mname[0m
              Use [4mname[24m as the digest algorithm used to mangle the  passphrases
              for symmetric encryption.  The default is SHA-1.

       [1m--s2k-mode [4m[22mn[0m
              Selects how passphrases for symmetric encryption are mangled. If
              [4mn[24m  is 0 a plain passphrase (which is in general not recommended)
              will be used, a 1 adds a salt (which should not be used) to  the
              passphrase  and  a  3 (the default) iterates the whole process a
              number of times (see [1m--s2k-count[22m).

       [1m--s2k-count [4m[22mn[0m
              Specify how many times the passphrases  mangling  for  symmetric
              encryption  is  repeated.  This value may range between 1024 and
              65011712 inclusive.  The default  is  inquired  from  gpg-agent.
              Note  that  not  all values in the 1024-65011712 range are legal
              and if an illegal value is selected, GnuPG will round up to  the
              nearest  legal  value.  This option is only meaningful if [1m--s2k-[0m
              [1mmode [22mis set to the default of 3.

   [1mCompliance options[0m

       These options control what GnuPG is compliant to. Only one of these op‚Äê
       tions may be active at a time. Note that the default setting of this is
       nearly always the correct one.  See  the  INTEROPERABILITY  WITH  OTHER
       OPENPGP PROGRAMS section below before using one of these options.

       [1m--gnupg[0m
              Use  standard GnuPG behavior. This is essentially OpenPGP behav‚Äê
              ior (see [1m--openpgp[22m), but with extension from the proposed update
              to OpenPGP and with some additional workarounds for common  com‚Äê
              patibility  problems  in different versions of PGP.  This is the
              default option, so it is not generally needed,  but  it  may  be
              useful to override a different compliance option in the gpg.conf
              file.

       [1m--openpgp[0m
              Reset  all  packet,  cipher and digest options to strict OpenPGP
              behavior.  This option  implies  [1m--allow-old-cipher-algos[22m.   Use
              this  option  to  reset all previous options like [1m--s2k-*[22m, [1m--ci‚Äê[0m
              [1mpher-algo[22m, [1m--digest-algo [22mand [1m--compress-algo [22mto OpenPGP  compli‚Äê
              ant values. All PGP workarounds are disabled.

       [1m--rfc4880[0m
              Reset  all  packet, cipher and digest options to strict RFC-4880
              behavior.  This option implies  [1m--allow-old-cipher-algos[22m.   Note
              that this is currently the same thing as [1m--openpgp[22m.

       [1m--rfc4880bis[0m
              Reset  all packet, cipher and digest options to strict according
              to the proposed updates of RFC-4880.

       [1m--rfc2440[0m
              Reset all packet, cipher and digest options to  strict  RFC-2440
              behavior.  Note that by using this option encryption packets are
              created  in  a legacy mode without MDC protection.  This is dan‚Äê
              gerous and should thus only be used for experiments.   This  op‚Äê
              tion  implies  [1m--allow-old-cipher-algos[22m.   See also option [1m--ig‚Äê[0m
              [1mnore-mdc-error[22m.

       [1m--pgp6 [22mThis option is obsolete; it is handled as an alias for [1m--pgp7[0m

       [1m--pgp7 [22mSet up all options to be as PGP 7 compliant  as  possible.  This
              allowed  the  ciphers  IDEA, 3DES, CAST5,AES128, AES192, AES256,
              and TWOFISH., the hashes MD5, SHA1 and RIPEMD160, and  the  com‚Äê
              pression algorithms none and ZIP.  This option implies [1m--escape-[0m
              [1mfrom-lines [22mand disables [1m--throw-keyids[22m,

       [1m--pgp8 [22mSet  up  all options to be as PGP 8 compliant as possible. PGP 8
              is a lot closer to the OpenPGP standard than  previous  versions
              of PGP, so all this does is disable [1m--throw-keyids [22mand set [1m--es‚Äê[0m
              [1mcape-from-lines[22m.   All  algorithms  are  allowed  except for the
              SHA224, SHA384, and SHA512 digests.

       [1m--compliance [4m[22mstring[0m
              This option can be used instead of one  of  the  options  above.
              Valid  values for [4mstring[24m are the above option names (without the
              double dash) and possibly others as shown when using "help"  for
              [4mstring[24m.

       [1m--min-rsa-length [4m[22mn[0m
              This option adjusts the compliance mode "de-vs" for stricter key
              size  requirements.   For example, a value of 3000 turns rsa2048
              and dsa2048 keys into non-VS-NfD compliant keys.

       [1m--require-compliance[0m
              To check that data has been encrypted according to the rules  of
              the  current  compliance  mode, a gpg user needs to evaluate the
              status lines.  This is allows  frontends  to  handle  compliance
              check in a more flexible way.  However, for scripted use the re‚Äê
              quired evaluation of the status-line requires quite some effort;
              this  option  can  be  used  instead  to  make sure that the gpg
              process exits with a failure if the  compliance  rules  are  not
              fulfilled.   Note  that this option has currently an effect only
              in "de-vs" mode.

   [1mDoing things one usually doesn't want to do[0m

       [1m-n[0m
       [1m--dry-run[0m
              Don't make any changes (this is not completely implemented).

       [1m--list-only[0m
              Changes the behaviour of some commands. This is  like  [1m--dry-run[0m
              but  different in some cases. The semantic of this option may be
              extended in the future. Currently it only skips the  actual  de‚Äê
              cryption  pass  and  therefore enables a fast listing of the en‚Äê
              cryption keys.

       [1m-i[0m
       [1m--interactive[0m
              Prompt before overwriting any files.

       [1m--compatibility-flags [4m[22mflags[0m
              Set compatibility flags to work around problems due to  non-com‚Äê
              pliant  keys  or data.  The [4mflags[24m are given as a comma separated
              list of flag names and are OR-ed  together.   The  special  flag
              "none"  clears  the  list  and  allows one to start over with an
              empty list.  To get a list of  available  flags  the  sole  word
              "help" can be used.

       [1m--debug-level [4m[22mlevel[0m
              Select  the debug level for investigating problems. [4mlevel[24m may be
              a numeric value or by a keyword:

              [1mnone   [22mNo debugging at all.  A value of less than 1 may be  used
                     instead of the keyword.

              [1mbasic  [22mSome  basic  debug messages.  A value between 1 and 2 may
                     be used instead of the keyword.

              [1madvanced[0m
                     More verbose debug messages.  A value between 3 and 5 may
                     be used instead of the keyword.

              [1mexpert [22mEven more detailed messages.  A value between 6 and 8 may
                     be used instead of the keyword.

              [1mguru   [22mAll of the debug messages you can get.  A  value  greater
                     than  8 may be used instead of the keyword.  The creation
                     of hash tracing files is only enabled if the  keyword  is
                     used.

       How  these  messages  are  mapped  to the actual debugging flags is not
       specified and may change with newer releases of this program. They  are
       however carefully selected to best aid in debugging.

       [1m--debug [4m[22mflags[0m
              Set  debug flags.  All flags are or-ed and [4mflags[24m may be given in
              C syntax (e.g. 0x0042) or as a  comma  separated  list  of  flag
              names.   To  get  a  list of all supported flags the single word
              "help" can be used. This option is only useful for debugging and
              the behavior may change at any time without notice.

       [1m--debug-all[0m
              Set all useful debugging flags.

       [1m--debug-iolbf[0m
              Set stdout into line buffered mode.  This option is only honored
              when given on the command line.

       [1m--debug-set-iobuf-size [4m[22mn[0m
              Change the buffer size of the IOBUFs to  [4mn[24m  kilobyte.   Using  0
              prints  the  current size.  Note well: This is a maintainer only
              option and may thus be changed or removed at  any  time  without
              notice.

       [1m--debug-allow-large-chunks[0m
              To  facilitate software tests and experiments this option allows
              one to specify a limit of up to 4 EiB ([1m--chunk-size 62[22m).

       [1m--debug-ignore-expiration[0m
              This option tries to override certain key expiration dates.   It
              is only useful for certain regression tests.

       [1m--faked-system-time [4m[22mepoch[0m
              This  option is only useful for testing; it sets the system time
              back or forth to [4mepoch[24m which is the number  of  seconds  elapsed
              since the year 1970.  Alternatively [4mepoch[24m may be given as a full
              ISO time string (e.g. "20070924T154812").

              If  you  suffix  [4mepoch[24m  with an exclamation mark (!), the system
              time will appear to be frozen at the specified time.

       [1m--full-timestrings[0m
              Change the format of printed creation and expiration times  from
              just the date to the date and time.  This is in general not use‚Äê
              ful  and  the  same  information  is anyway available in [1m--with-[0m
              [1mcolons [22mmode.  These longer strings are  also  not  well  aligned
              with other printed data.

       [1m--enable-progress-filter[0m
              Enable certain PROGRESS status outputs. This option allows fron‚Äê
              tends  to  display  a progress indicator while gpg is processing
              larger files.  There is a slight performance overhead using it.

       [1m--status-fd [4m[22mn[0m
              Write special status strings to the file descriptor [4mn[24m.  See  the
              file DETAILS in the documentation for a listing of them.

       [1m--status-file [4m[22mfile[0m
              Same  as  [1m--status-fd[22m, except the status data is written to file
              [4mfile[24m.

       [1m--logger-fd [4m[22mn[0m
              Write log output to file descriptor [4mn[24m and not to STDERR.

       [1m--log-file [4m[22mfile[0m
       [1m--logger-file [4m[22mfile[0m
              Same as [1m--logger-fd[22m, except the logger data is written  to  file
              [4mfile[24m.  Use ‚Äò[4msocket://[24m‚Äô to log to s socket.

       [1m--log-time[0m
              Prefix  all  log  output with a timestamp even if no log file is
              used.

       [1m--attribute-fd [4m[22mn[0m
              Write attribute subpackets to the file  descriptor  [4mn[24m.  This  is
              most  useful for use with [1m--status-fd[22m, since the status messages
              are needed to separate  out  the  various  subpackets  from  the
              stream delivered to the file descriptor.

       [1m--attribute-file [4m[22mfile[0m
              Same  as [1m--attribute-fd[22m, except the attribute data is written to
              file [4mfile[24m.

       [1m--comment [4m[22mstring[0m
       [1m--no-comments[0m
              Use [4mstring[24m as a comment string in cleartext signatures and ASCII
              armored messages or keys (see [1m--armor[22m). The default behavior  is
              not  to use a comment string. [1m--comment [22mmay be repeated multiple
              times to get multiple comment strings. [1m--no-comments [22mremoves all
              comments.  It is a good idea to keep the length of a single com‚Äê
              ment below 60 characters to avoid problems  with  mail  programs
              wrapping  such  lines.   Note that comment lines, like all other
              header lines, are not protected by the signature.

       [1m--emit-version[0m
       [1m--no-emit-version[0m
              Force inclusion of the version string in ASCII  armored  output.
              If  given once only the name of the program and the major number
              is emitted, given twice the minor is also emitted, given  thrice
              the  micro  is  added,  and given four times an operating system
              identification is  also  emitted.   [1m--no-emit-version  [22m(default)
              disables the version line.

       [1m--sig-notation {[4m[22mname[24m=[4mvalue[24m}
       [1m--cert-notation {[4m[22mname[24m=[4mvalue[24m}
       [1m-N, --set-notation {[4m[22mname[24m=[4mvalue[24m}
              Put  the  name  value  pair into the signature as notation data.
              [4mname[24m must consist only of printable characters  or  spaces,  and
              must  contain  a  '@' character in the form keyname@domain.exam‚Äê
              ple.com (substituting the appropriate keyname and  domain  name,
              of  course).   This is to help prevent pollution of the IETF re‚Äê
              served notation namespace. The [1m--expert [22mflag overrides  the  '@'
              check.  [4mvalue[24m may be any printable string; it will be encoded in
              UTF-8, so you should check that your  [1m--display-charset  [22mis  set
              correctly.  If you prefix [4mname[24m with an exclamation mark (!), the
              notation data will be flagged  as  critical  (rfc4880:5.2.3.16).
              [1m--sig-notation [22msets a notation for data signatures. [1m--cert-nota‚Äê[0m
              [1mtion [22msets a notation for key signatures (certifications). [1m--set-[0m
              [1mnotation [22msets both.

              There are special codes that may be used in notation names. "%k"
              will  be  expanded into the key ID of the key being signed, "%K"
              into the long key ID of the key being signed, "%f" into the fin‚Äê
              gerprint of the key being signed, "%s" into the key  ID  of  the
              key  making  the signature, "%S" into the long key ID of the key
              making the signature, "%g" into the fingerprint of the key  mak‚Äê
              ing  the signature (which might be a subkey), "%p" into the fin‚Äê
              gerprint of the primary key of the  key  making  the  signature,
              "%c"  into  the  signature count from the OpenPGP smartcard, and
              "%%" results in a single "%". %k, %K, and %f are only meaningful
              when making a key signature  (certification),  and  %c  is  only
              meaningful when using the OpenPGP smartcard.

       [1m--known-notation [4m[22mname[0m
              Adds  [4mname[24m to a list of known critical signature notations.  The
              effect of this is that gpg will not  mark  a  signature  with  a
              critical  signature notation of that name as bad.  Note that gpg
              already knows by default about a few critical  signatures  nota‚Äê
              tion names.

       [1m--sig-policy-url [4m[22mstring[0m
       [1m--cert-policy-url [4m[22mstring[0m
       [1m--set-policy-url [4m[22mstring[0m
              Use  [4mstring[24m  as  a Policy URL for signatures (rfc4880:5.2.3.20).
              If you prefix it with an exclamation mark (!),  the  policy  URL
              packet will be flagged as critical. [1m--sig-policy-url [22msets a pol‚Äê
              icy url for data signatures. [1m--cert-policy-url [22msets a policy url
              for key signatures (certifications). [1m--set-policy-url [22msets both.

              The same %-expandos used for notation data are available here as
              well.

       [1m--sig-keyserver-url [4m[22mstring[0m
              Use  [4mstring[24m as a preferred keyserver URL for data signatures. If
              you prefix it with an exclamation mark (!),  the  keyserver  URL
              packet will be flagged as critical.

              The same %-expandos used for notation data are available here as
              well.

       [1m--set-filename [4m[22mstring[0m
              Use  [4mstring[24m  as  the  filename  which is stored inside messages.
              This overrides the default, which is to use the actual  filename
              of  the file being encrypted.  Using the empty string for [4mstring[0m
              effectively removes the filename from the output.

       [1m--for-your-eyes-only[0m
       [1m--no-for-your-eyes-only[0m
              Set the `for your eyes only' flag in the  message.  This  causes
              GnuPG  to  refuse to save the file unless the [1m--output [22moption is
              given, and PGP to use a "secure viewer" with a claimed  Tempest-
              resistant  font  to  display  the message. This option overrides
              [1m--set-filename[22m.  [1m--no-for-your-eyes-only [22mdisables this option.

       [1m--use-embedded-filename[0m
       [1m--no-use-embedded-filename[0m
              Try to create a file with a name as embedded in the  data.  This
              can  be a dangerous option as it enables overwriting files.  De‚Äê
              faults to no.  Note that the option [1m--output [22moverrides this  op‚Äê
              tion.

       [1m--cipher-algo [4m[22mname[0m
              Use  [4mname[24m as cipher algorithm. Running the program with the com‚Äê
              mand [1m--version [22myields a list of supported algorithms. If this is
              not used the cipher algorithm is selected from  the  preferences
              stored with the key. In general, you do not want to use this op‚Äê
              tion  as it allows you to violate the OpenPGP standard.  The op‚Äê
              tion [1m--personal-cipher-preferences [22mis the safe way to accomplish
              the same thing.

       [1m--digest-algo [4m[22mname[0m
              Use [4mname[24m as the message digest algorithm.  Running  the  program
              with  the  command  [1m--version  [22myields  a list of supported algo‚Äê
              rithms. In general, you do not want to use this option as it al‚Äê
              lows you to violate the OpenPGP  standard.   The  option  [1m--per‚Äê[0m
              [1msonal-digest-preferences  [22mis the safe way to accomplish the same
              thing.

       [1m--compress-algo [4m[22mname[0m
              Use compression algorithm [4mname[24m. "zlib" is RFC-1950 ZLIB compres‚Äê
              sion. "zip" is RFC-1951 ZIP compression which is  used  by  PGP.
              "bzip2"  is  a  more modern compression scheme that can compress
              some things better than zip or zlib, but at  the  cost  of  more
              memory used during compression and decompression. "uncompressed"
              or  "none" disables compression. If this option is not used, the
              default behavior is to examine the recipient key preferences  to
              see  which algorithms the recipient supports. If all else fails,
              ZIP is used for maximum compatibility.

              ZLIB may give better compression results than ZIP, as  the  com‚Äê
              pression  window  size is not limited to 8k. BZIP2 may give even
              better compression results than that, but will  use  a  signifi‚Äê
              cantly larger amount of memory while compressing and decompress‚Äê
              ing.  This  may  be  significant in low memory situations. Note,
              however, that PGP (all versions) only supports ZIP  compression.
              Using  any algorithm other than ZIP or "none" will make the mes‚Äê
              sage unreadable with PGP. In general, you do  not  want  to  use
              this  option  as  it allows you to violate the OpenPGP standard.
              The option [1m--personal-compress-preferences [22mis the  safe  way  to
              accomplish the same thing.

       [1m--cert-digest-algo [4m[22mname[0m
              Use  [4mname[24m  as  the  message digest algorithm used when signing a
              key. Running the program with the  command  [1m--version  [22myields  a
              list  of  supported  algorithms.  Be aware that if you choose an
              algorithm that GnuPG supports but other OpenPGP  implementations
              do  not,  then some users will not be able to use the key signa‚Äê
              tures you make, or quite possibly your entire  key.   Note  also
              that  a  public key algorithm must be compatible with the speci‚Äê
              fied digest algorithm; thus selecting an arbitrary digest  algo‚Äê
              rithm  may  result in error messages from lower crypto layers or
              lead to security flaws.

       [1m--disable-cipher-algo [4m[22mname[0m
              Never allow the use of [4mname[24m as cipher algorithm.  The given name
              will not be checked so that a later loaded algorithm will  still
              get disabled.

       [1m--disable-pubkey-algo [4m[22mname[0m
              Never  allow the use of [4mname[24m as public key algorithm.  The given
              name will not be checked so that a later loaded  algorithm  will
              still get disabled.

       [1m--throw-keyids[0m
       [1m--no-throw-keyids[0m
              Do  not  put the recipient key IDs into encrypted messages. This
              helps to hide the receivers of the  message  and  is  a  limited
              countermeasure against traffic analysis. ([Using a little social
              engineering  anyone who is able to decrypt the message can check
              whether one of the other recipients is the  one  he  suspects.])
              On  the  receiving side, it may slow down the decryption process
              because all available secret keys must  be  tried.   [1m--no-throw-[0m
              [1mkeyids [22mdisables this option. This option is essentially the same
              as using [1m--hidden-recipient [22mfor all recipients.

       [1m--not-dash-escaped[0m
              This option changes the behavior of cleartext signatures so that
              they  can  be  used for patch files. You should not send such an
              armored file via email because all spaces and line  endings  are
              hashed  too.  You  can  not use this option for data which has 5
              dashes at the beginning of a line, patch files don't have  this.
              A  special  armor  header  line tells GnuPG about this cleartext
              signature option.

       [1m--escape-from-lines[0m
       [1m--no-escape-from-lines[0m
              Because some mailers change  lines  starting  with  "From  "  to
              ">From  "  it is good to handle such lines in a special way when
              creating cleartext signatures to prevent the  mail  system  from
              breaking  the  signature. Note that all other PGP versions do it
              this way too.  Enabled by default.  [1m--no-escape-from-lines  [22mdis‚Äê
              ables this option.

       [1m--passphrase-repeat [4m[22mn[0m
              Specify  how many times [1mgpg [22mwill request a new passphrase be re‚Äê
              peated.  This is useful for helping memorize a passphrase.   De‚Äê
              faults  to  1  repetition;  can  be  set  to  0  to  disable any
              passphrase repetition.  Note that a [4mn[24m greater than 1 will pop up
              the pinentry window [4mn[24m+1 times even if a modern pinentry with two
              entry fields is used.

       [1m--passphrase-fd [4m[22mn[0m
              Read the passphrase from file descriptor [4mn[24m. Only the first  line
              will  be  read  from  file descriptor [4mn[24m. If you use 0 for [4mn[24m, the
              passphrase will be read from STDIN. This can  only  be  used  if
              only one passphrase is supplied.

              Note  that since Version 2.0 this passphrase is only used if the
              option [1m--batch [22mhas  also  been  given.  Since  Version  2.1  the
              [1m--pinentry-mode [22malso needs to be set to [1mloopback[22m.

       [1m--passphrase-file [4m[22mfile[0m
              Read  the passphrase from file [4mfile[24m. Only the first line will be
              read from  file  [4mfile[24m.  This  can  only  be  used  if  only  one
              passphrase is supplied. Obviously, a passphrase stored in a file
              is  of  questionable security if other users can read this file.
              Don't use this option if you can avoid it.

              Note that since Version 2.0 this passphrase is only used if  the
              option  [1m--batch  [22mhas  also  been  given.  Since  Version 2.1 the
              [1m--pinentry-mode [22malso needs to be set to [1mloopback[22m.

       [1m--passphrase [4m[22mstring[0m
              Use [4mstring[24m as the passphrase. This can only be used if only  one
              passphrase  is supplied. Obviously, this is of very questionable
              security on a multi-user system. Don't use this  option  if  you
              can avoid it.

              Note  that since Version 2.0 this passphrase is only used if the
              option [1m--batch [22mhas  also  been  given.  Since  Version  2.1  the
              [1m--pinentry-mode [22malso needs to be set to [1mloopback[22m.

       [1m--pinentry-mode [4m[22mmode[0m
              Set the pinentry mode to [4mmode[24m.  Allowed values for [4mmode[24m are:

              [1mdefault[0m
                     Use the default of the agent, which is [1mask[22m.

              [1mask    [22mForce the use of the Pinentry.

              [1mcancel [22mEmulate use of Pinentry's cancel button.

              [1merror  [22mReturn a Pinentry error (``No Pinentry'').

              [1mloopback[0m
                     Redirect  Pinentry  queries  to the caller.  Note that in
                     contrast to Pinentry the user is not prompted again if he
                     enters a bad password.

       [1m--no-symkey-cache[0m
              Disable the passphrase cache used for symmetrical  en-  and  de‚Äê
              cryption.   This  cache  is  based  on the message specific salt
              value (cf. [1m--s2k-mode[22m).

       [1m--request-origin [4m[22morigin[0m
              Tell gpg to assume that the operation ultimately  originated  at
              [4morigin[24m.   Depending  on  the origin certain restrictions are ap‚Äê
              plied and the Pinentry may include an extra note on the  origin.
              Supported values for [4morigin[24m are: [1mlocal [22mwhich is the default, [1mre‚Äê[0m
              [1mmote [22mto indicate a remote origin or [1mbrowser [22mfor an operation re‚Äê
              quested by a web browser.

       [1m--command-fd [4m[22mn[0m
              This is a replacement for the deprecated shared-memory IPC mode.
              If  this  option  is enabled, user input on questions is not ex‚Äê
              pected from the TTY but  from  the  given  file  descriptor.  It
              should  be  used together with [1m--status-fd[22m. See the file doc/DE‚Äê
              TAILS in the source distribution for details on how to use it.

       [1m--command-file [4m[22mfile[0m
              Same as [1m--command-fd[22m, except the commands are read out  of  file
              [4mfile[0m

       [1m--allow-non-selfsigned-uid[0m
       [1m--no-allow-non-selfsigned-uid[0m
              Allow  the  import  and  use of keys with user IDs which are not
              self-signed. This is not recommended, as a non self-signed  user
              ID is trivial to forge. [1m--no-allow-non-selfsigned-uid [22mdisables.

       [1m--allow-freeform-uid[0m
              Disable all checks on the form of the user ID while generating a
              new  one.  This option should only be used in very special envi‚Äê
              ronments as it does not ensure the de-facto standard  format  of
              user IDs.

       [1m--ignore-time-conflict[0m
              GnuPG  normally  checks that the timestamps associated with keys
              and signatures have plausible values. However, sometimes a  sig‚Äê
              nature  seems  to  be  older than the key due to clock problems.
              This option makes these checks just a warning.  See  also  [1m--ig‚Äê[0m
              [1mnore-valid-from [22mfor timestamp issues on subkeys.

       [1m--ignore-valid-from[0m
              GnuPG  normally  does  not select and use subkeys created in the
              future.  This option allows the use of such keys  and  thus  ex‚Äê
              hibits  the  pre-1.0.7 behaviour. You should not use this option
              unless there is some clock problem. See also  [1m--ignore-time-con‚Äê[0m
              [1mflict [22mfor timestamp issues with signatures.

       [1m--ignore-crc-error[0m
              The  ASCII  armor used by OpenPGP is protected by a CRC checksum
              against transmission errors. Occasionally the CRC  gets  mangled
              somewhere  on  the  transmission  channel but the actual content
              (which is protected by the OpenPGP  protocol  anyway)  is  still
              okay. This option allows GnuPG to ignore CRC errors.

       [1m--ignore-mdc-error[0m
              This  option  changes  a MDC integrity protection failure into a
              warning.  It is required to decrypt old messages which  did  not
              use  an  MDC.   It  may also be useful if a message is partially
              garbled, but it is necessary to get as much data as possible out
              of that garbled message.  Be aware that a missing or failed  MDC
              can  be an indication of an attack.  Use with great caution; see
              also option [1m--rfc2440[22m.

       [1m--allow-old-cipher-algos[0m
              Old cipher algorithms like 3DES, IDEA, or CAST5 encrypt data us‚Äê
              ing blocks of 64 bits; modern algorithms use blocks of  128  bit
              instead.   To avoid certain attack on these old algorithms it is
              suggested not to encrypt more than 150  MiByte  using  the  same
              key.  For this reason gpg does not allow the use of 64 bit block
              size algorithms for encryption unless this option is specified.

       [1m--allow-weak-digest-algos[0m
              Signatures  made  with known-weak digest algorithms are normally
              rejected with an ``invalid digest algorithm'' message.  This op‚Äê
              tion allows the verification of signatures made with  such  weak
              algorithms.  MD5 is the only digest algorithm considered weak by
              default.   See  also  [1m--weak-digest [22mto reject other digest algo‚Äê
              rithms.

       [1m--weak-digest [4m[22mname[0m
              Treat the specified digest algorithm as weak.   Signatures  made
              over  weak digests algorithms are normally rejected. This option
              can be supplied multiple times if multiple algorithms should  be
              considered  weak.  See also [1m--allow-weak-digest-algos [22mto disable
              rejection of weak digests.  MD5 is always considered  weak,  and
              does not need to be listed explicitly.

       [1m--allow-weak-key-signatures[0m
              To  avoid  a  minor risk of collision attacks on third-party key
              signatures made using SHA-1, those key signatures are considered
              invalid.  This options allows one to override this restriction.

       [1m--override-compliance-check[0m
              This was a temporary introduced option and has no more effect.

       [1m--no-default-keyring[0m
              Do not add the default keyring to the  list  of  keyrings.  Note
              that  GnuPG  needs  for almost all operations a keyring. Thus if
              you use this option and do not provide  alternate  keyrings  via
              [1m--keyring[22m, then GnuPG will still use the default keyring.

              Note that if the option [1muse-keyboxd [22mis enabled in ‚Äò[4mcommon.conf[24m‚Äô,
              no  keyrings  are used at all and keys are all maintained by the
              keyboxd process in its own database.

       [1m--no-keyring[0m
              Do not use any keyring at all.  This overrides the  default  and
              all options which specify keyrings.

       [1m--skip-verify[0m
              Skip  the  signature verification step. This may be used to make
              the decryption faster  if  the  signature  verification  is  not
              needed.

       [1m--with-key-data[0m
              Print  key listings delimited by colons (like [1m--with-colons[22m) and
              print the public key data.

       [1m--list-signatures[0m
       [1m--list-sigs[0m
              Same as [1m--list-keys[22m, but the signatures are  listed  too.   This
              command  has  the  same effect as using [1m--list-keys [22mwith [1m--with-[0m
              [1msig-list[22m.  Note that in contrast to [1m--check-signatures  [22mthe  key
              signatures are not verified.  This command can be used to create
              a  list  of signing keys missing in the local keyring; for exam‚Äê
              ple:

               gpg --list-sigs --with-colons USERID | \
                 awk -F: '$1=="sig" && $2=="?" {if($13){print $13}else{print $5}}'

       [1m--fast-list-mode[0m
              Changes the output of the list commands to work faster; this  is
              achieved  by  leaving  some parts empty. Some applications don't
              need the user ID and the trust information given  in  the  list‚Äê
              ings.  By  using this options they can get a faster listing. The
              exact behaviour of this option may change  in  future  versions.
              If you are missing some information, don't use this option.

       [1m--no-literal[0m
              This  is  not  for normal use. Use the source to see for what it
              might be useful.

       [1m--set-filesize[0m
              This is not for normal use. Use the source to see  for  what  it
              might be useful.

       [1m--show-session-key[0m
              Display  the  session  key used for one message. See [1m--override-[0m
              [1msession-key [22mfor the counterpart of this option.

              We think that Key Escrow is a Bad Thing; however the user should
              have the freedom to decide whether to go to prison or to  reveal
              the  content  of  one  specific message without compromising all
              messages ever encrypted for one secret key.

              You can also use this option if you receive an encrypted message
              which is abusive or offensive, to prove to the administrators of
              the messaging system that the ciphertext transmitted corresponds
              to an inappropriate plaintext so they can  take  action  against
              the offending user.

       [1m--override-session-key [4m[22mstring[0m
       [1m--override-session-key-fd [4m[22mfd[0m
              Don't  use  the public key but the session key [4mstring[24m respective
              the session key taken from the first line  read  from  file  de‚Äê
              scriptor  [4mfd[24m.   The format of this string is the same as the one
              printed by [1m--show-session-key[22m. This option is normally not  used
              but comes handy in case someone forces you to reveal the content
              of an encrypted message; using this option you can do this with‚Äê
              out handing out the secret key.  Note that using [1m--override-ses‚Äê[0m
              [1msion-key  [22mmay  reveal the session key to all local users via the
              global process table.  Often it is useful to combine this option
              with [1m--no-keyring[22m.

       [1m--ask-sig-expire[0m
       [1m--no-ask-sig-expire[0m
              When making a data signature, prompt for an expiration time.  If
              this  option is not specified, the expiration time set via [1m--de‚Äê[0m
              [1mfault-sig-expire [22mis used. [1m--no-ask-sig-expire [22mdisables this  op‚Äê
              tion.

       [1m--default-sig-expire[0m
              The  default  expiration  time  to use for signature expiration.
              Valid values are "0" for no expiration, a number followed by the
              letter d (for days), w (for weeks), m (for months),  or  y  (for
              years)  (for  example  "2m"  for  two  months,  or "5y" for five
              years), or an absolute date in the form YYYY-MM-DD. Defaults  to
              "0".

       [1m--ask-cert-expire[0m
       [1m--no-ask-cert-expire[0m
              When  making  a key signature, prompt for an expiration time. If
              this option is not specified, the expiration time set via  [1m--de‚Äê[0m
              [1mfault-cert-expire  [22mis  used.  [1m--no-ask-cert-expire [22mdisables this
              option.

       [1m--default-cert-expire[0m
              The default expiration time to use for key signature expiration.
              Valid values are "0" for no expiration, a number followed by the
              letter d (for days), w (for weeks), m (for months),  or  y  (for
              years)  (for  example  "2m"  for  two  months,  or "5y" for five
              years), or an absolute date in the form YYYY-MM-DD. Defaults  to
              "0".

       [1m--default-new-key-algo [4m[22mstring[0m
              This option can be used to change the default algorithms for key
              generation.  The [4mstring[24m is similar to the arguments required for
              the command [1m--quick-add-key [22mbut slightly different.  For example
              the  current  default  of  [1m"rsa2048/cert,sign+rsa2048/encr"  [22m(or
              [1m"rsa3072"[22m) can be changed to the value of what we currently call
              future  default, which is [1m"ed25519/cert,sign+cv25519/encr"[22m.  You
              need to consult the source code to learn the details.  Note that
              the advanced key generation commands can always be used to spec‚Äê
              ify a key algorithm directly.

       [1m--no-auto-trust-new-key[0m
              When creating a new key the ownertrust of the new key is set  to
              ultimate.  This option disables this and the user needs to manu‚Äê
              ally assign an ownertrust value.

       [1m--force-sign-key[0m
              This option modifies the behaviour of the commands [1m--quick-sign-[0m
              [1mkey[22m,  [1m--quick-lsign-key[22m,  and the "sign" sub-commands of [1m--edit-[0m
              [1mkey [22mby forcing the creation of a key signature, even if one  al‚Äê
              ready exists.

       [1m--forbid-gen-key[0m
              This  option  is  intended  for use in the global config file to
              disallow the use of generate key commands.  Those commands  will
              then fail with the error code for Not Enabled.

       [1m--allow-secret-key-import[0m
              This is an obsolete option and is not used anywhere.

       [1m--allow-multiple-messages[0m

       [1m--no-allow-multiple-messages[0m
              These are obsolete options; they have no more effect since GnuPG
              2.2.8.

       [1m--enable-special-filenames[0m
              This option enables a mode in which filenames of the form ‚Äò[4m-&n[24m‚Äô,
              where  n is a non-negative decimal number, refer to the file de‚Äê
              scriptor n and not to a file with that name.

       [1m--no-expensive-trust-checks[0m
              Experimental use only.

       [1m--preserve-permissions[0m
              Don't change the permissions of a secret keyring  back  to  user
              read/write  only.  Use  this option only if you really know what
              you are doing.

       [1m--default-preference-list [4m[22mstring[0m
              Set the list of default preferences to [4mstring[24m.  This  preference
              list  is used for new keys and becomes the default for "setpref"
              in the [1m--edit-key [22mmenu.

       [1m--default-keyserver-url [4m[22mname[0m
              Set the default keyserver URL to [4mname[24m. This  keyserver  will  be
              used as the keyserver URL when writing a new self-signature on a
              key, which includes key generation and changing preferences.

       [1m--list-config[0m
              Display various internal configuration parameters of GnuPG. This
              option is intended for external programs that call GnuPG to per‚Äê
              form  tasks,  and  is  thus  not  generally useful. See the file
              ‚Äò[4mdoc/DETAILS[24m‚Äô in the source  distribution  for  the  details  of
              which  configuration  items may be listed. [1m--list-config [22mis only
              usable with [1m--with-colons [22mset.

       [1m--list-gcrypt-config[0m
              Display various internal configuration parameters of Libgcrypt.

       [1m--gpgconf-list[0m
              This command is similar to [1m--list-config [22mbut in general only in‚Äê
              ternally used by the [1mgpgconf [22mtool.

       [1m--gpgconf-test[0m
              This is more or less dummy action.  However it parses  the  con‚Äê
              figuration  file  and  returns with failure if the configuration
              file would prevent [1mgpg [22mfrom startup.  Thus it may be used to run
              a syntax check on the configuration file.

       [1m--chuid [4m[22muid[0m
              Change the current user to [4muid[24m which may either be a number or a
              name.  This can be used from the root account to run gpg for an‚Äê
              other user.  If [4muid[24m is not the current UID a  standard  PATH  is
              set  and  the envvar GNUPGHOME is unset.  To override the latter
              the option [1m--homedir [22mcan be used.  This option has only  an  ef‚Äê
              fect  when  used on the command line.  This option has currently
              no effect at all on Windows.

   [1mDeprecated options[0m

       [1m--show-photos[0m
       [1m--no-show-photos[0m
              Causes   [1m--list-keys[22m,   [1m--list-signatures[22m,   [1m--list-public-keys[22m,
              [1m--list-secret-keys[22m,  and  verifying  a signature to also display
              the photo ID attached to the key,  if  any.  See  also  [1m--photo-[0m
              [1mviewer[22m.   These   options  are  deprecated.  Use  [1m--list-options[0m
              [1m[no-]show-photos [22mand/or  [1m--verify-options  [no-]show-photos  [22min‚Äê
              stead.

       [1m--show-keyring[0m
              Display  the  keyring  name  at the head of key listings to show
              which keyring a given key resides on. This option is deprecated:
              use [1m--list-options [no-]show-keyring [22minstead.

       [1m--show-notation[0m
       [1m--no-show-notation[0m
              Show signature notations in the  [1m--list-signatures  [22mor  [1m--check-[0m
              [1msignatures [22mlistings as well as when verifying a signature with a
              notation in it. These options are deprecated. Use [1m--list-options[0m
              [1m[no-]show-notation  [22mand/or  [1m--verify-options  [no-]show-notation[0m
              instead.

       [1m--show-policy-url[0m
       [1m--no-show-policy-url[0m
              Show policy URLs in the [1m--list-signatures [22mor  [1m--check-signatures[0m
              listings as well as when verifying a signature with a policy URL
              in   it.   These  options  are  deprecated.  Use  [1m--list-options[0m
              [1m[no-]show-policy-url [22mand/or  [1m--verify-options  [no-]show-policy-[0m
              [1murl [22minstead.

       [1m--personal-aead-preferences [4m[22mstring[0m
              This  option  is deprecated and has no more effect since version
              2.3.9.

       [1m--aead-algo [4m[22mname[0m
              This option is deprecated and has no more effect  since  version
              2.3.9.

[1mEXAMPLES[0m
       [1mgpg -se -r Bob file[0m
              sign and encrypt for user Bob

       [1mgpg --clear-sign file[0m
              make a cleartext signature

       [1mgpg -sb file[0m
              make a detached signature

       [1mgpg -u 0x12345678 -sb file[0m
              make a detached signature with the key 0x12345678

       [1mgpg --list-keys user_ID[0m
              show keys

       [1mgpg --fingerprint user_ID[0m
              show fingerprint

       [1mgpg --verify pgpfile[0m
       [1mgpg --verify sigfile [22m[[1mdatafile[22m]
              Verify  the signature of the file but do not output the data un‚Äê
              less requested.  The second form is  used  for  detached  signa‚Äê
              tures, where [1msigfile [22mis the detached signature (either ASCII ar‚Äê
              mored  or  binary)  and [1mdatafile [22mare the signed data; if this is
              not given, the name of the file holding the signed data is  con‚Äê
              structed by cutting off the extension (".asc" or ".sig") of [1msig‚Äê[0m
              [1mfile  [22mor  by  asking  the  user for the filename.  If the option
              [1m--output [22mis also used the signed data is  written  to  the  file
              specified by that option; use [1m- [22mto write the signed data to std‚Äê
              out.

[1mHOW TO SPECIFY A USER ID[0m
       There  are  different ways to specify a user ID to GnuPG.  Some of them
       are only valid for [1mgpg [22mothers are only good for [1mgpgsm[22m.  Here is the en‚Äê
       tire list of ways to specify a key:

       [1mBy key Id.[0m
              This format is deduced from the length of  the  string  and  its
              content or [1m0x [22mprefix. The key Id of an X.509 certificate are the
              low  64  bits  of  its SHA-1 fingerprint.  The use of key Ids is
              just a shortcut, for all automated  processing  the  fingerprint
              should be used.

              When  using [1mgpg [22man exclamation mark (!) may be appended to force
              using the specified primary or secondary key and not to try  and
              calculate which primary or secondary key to use.

              The last four lines of the example give the key ID in their long
              form as internally used by the OpenPGP protocol. You can see the
              long key ID using the option [1m--with-colons[22m.

         234567C4
         0F34E556E
         01347A56A
         0xAB123456

         234AABBCC34567C4
         0F323456784E56EAB
         01AB3FED1347A5612
         0x234AABBCC34567C4

       [1mBy fingerprint.[0m
              This  format  is  deduced  from the length of the string and its
              content or the [1m0x [22mprefix.  Note, that only the 20  byte  version
              fingerprint  is available with [1mgpgsm [22m(i.e. the SHA-1 hash of the
              certificate).

              When using [1mgpg [22man exclamation mark (!) may be appended to  force
              using  the specified primary or secondary key and not to try and
              calculate which primary or secondary key to use.

              The best way to specify a key Id is by  using  the  fingerprint.
              This  avoids  any  ambiguities in case that there are duplicated
              key IDs.

         1234343434343434C434343434343434
         123434343434343C3434343434343734349A3434
         0E12343434343434343434EAB3484343434343434
         0xE12343434343434343434EAB3484343434343434

       [1mgpgsm [22malso accepts colons between each pair of hexadecimal  digits  be‚Äê
       cause  this  is  the  de-facto standard on how to present X.509 finger‚Äê
       prints.  [1mgpg [22malso allows the use of the space separated  SHA-1  finger‚Äê
       print as printed by the key listing commands.

       [1mBy exact match on OpenPGP user ID.[0m
              This  is denoted by a leading equal sign. It does not make sense
              for X.509 certificates.

         =Heinrich Heine <heinrichh@uni-duesseldorf.de>

       [1mBy exact match on an email address.[0m
              This is indicated by enclosing the email address  in  the  usual
              way with left and right angles.

         <heinrichh@uni-duesseldorf.de>

       [1mBy partial match on an email address.[0m
              This  is  indicated  by  prefixing  the search string with an [1m@[22m.
              This uses a substring search but considers only the mail address
              (i.e. inside the angle brackets).

         @heinrichh

       [1mBy exact match on the subject's DN.[0m
              This is indicated by a leading slash, directly followed  by  the
              RFC-2253 encoded DN of the subject.  Note that you can't use the
              string  printed  by  [1mgpgsm --list-keys [22mbecause that one has been
              reordered and modified for better readability; use [1m--with-colons[0m
              to print the raw (but standard escaped) RFC-2253 string.

         /CN=Heinrich Heine,O=Poets,L=Paris,C=FR

       [1mBy exact match on the issuer's DN.[0m
              This is indicated by a leading hash mark, directly followed by a
              slash and then directly followed by the RFC-2253 encoded  DN  of
              the  issuer.   This  should  return the Root cert of the issuer.
              See note above.

         #/CN=Root Cert,O=Poets,L=Paris,C=FR

       [1mBy exact match on serial number and issuer's DN.[0m
              This is indicated by a hash mark, followed  by  the  hexadecimal
              representation  of  the  serial number, then followed by a slash
              and the RFC-2253 encoded DN of the issuer. See note above.

         #4F03/CN=Root Cert,O=Poets,L=Paris,C=FR

       [1mBy keygrip.[0m
              This is indicated by an ampersand followed by the 40 hex  digits
              of  a  keygrip.  [1mgpgsm [22mprints the keygrip when using the command
              [1m--dump-cert[22m.

         &D75F22C3F86E355877348498CDC92BD21010A480

       [1mBy substring match.[0m
              This is the default mode but applications may want to explicitly
              indicate this by putting the asterisk in front.   Match  is  not
              case sensitive.

         Heine
         *Heine

       [1m. and + prefixes[0m
              These prefixes are reserved for looking up mails anchored at the
              end  and  for  a word search mode.  They are not yet implemented
              and using them is undefined.

              Please note that we have reused the hash mark  identifier  which
              was  used in old GnuPG versions to indicate the so called local-
              id.  It is not anymore used and there should be no conflict when
              used with X.509 stuff.

              Using the RFC-2253 format of DNs has the drawback that it is not
              possible to map them back to the original encoding,  however  we
              don't  have  to do this because our key database stores this en‚Äê
              coding as meta data.

[1mFILTER EXPRESSIONS[0m
       The options [1m--import-filter [22mand [1m--export-filter  [22muse  expressions  with
       this syntax (square brackets indicate an optional part and curly braces
       a repetition, white space between the elements are allowed):

                  [lc] {[{flag}] PROPNAME op VALUE [lc]}

       The  name  of a property ([4mPROPNAME[24m) may only consist of letters, digits
       and underscores.  The description for the filter type  describes  which
       properties  are defined.  If an undefined property is used it evaluates
       to the empty string.  Unless otherwise noted, the [4mVALUE[24m must always  be
       given  and  may not be the empty string.  No quoting is defined for the
       value, thus the value may not contain the strings [1m&& [22mor [1m||[22m,  which  are
       used  as  logical connection operators.  The flag [1m-- [22mcan be used to re‚Äê
       move this restriction.

       Numerical values are computed as long int; standard C notation applies.
       [4mlc[24m is the logical connection operator; either [1m&& [22mfor a  conjunction  or
       [1m||  [22mfor a disjunction.  A conjunction is assumed at the begin of an ex‚Äê
       pression.  Conjunctions have higher precedence than  disjunctions.   If
       [4mVALUE[24m  starts  with  one of the characters used in any [4mop[24m a space after
       the [4mop[24m is required.

       The supported operators ([4mop[24m) are:

       [1m=~     [22mSubstring must match.

       [1m!~     [22mSubstring must not match.

       [1m=      [22mThe full string must match.

       [1m<>     [22mThe full string must not match.

       [1m==     [22mThe numerical value must match.

       [1m!=     [22mThe numerical value must not match.

       [1m<=     [22mThe numerical value of the field must be LE than the value.

       [1m<      [22mThe numerical value of the field must be LT than the value.

       [1m>      [22mThe numerical value of the field must be GT than the value.

       [1m>=     [22mThe numerical value of the field must be GE than the value.

       [1m-le    [22mThe string value of the field must be less  or  equal  than  the
              value.

       [1m-lt    [22mThe string value of the field must be less than the value.

       [1m-gt    [22mThe string value of the field must be greater than the value.

       [1m-ge    [22mThe  string value of the field must be greater or equal than the
              value.

       [1m-n     [22mTrue if value is not empty (no value allowed).

       [1m-z     [22mTrue if value is empty (no value allowed).

       [1m-t     [22mAlias for "PROPNAME != 0" (no value allowed).

       [1m-f     [22mAlias for "PROPNAME == 0" (no value allowed).

       Values for [4mflag[24m must be space separated.  The supported flags are:

       [1m--     [4m[22mVALUE[24m spans to the end of the expression.

       [1m-c     [22mThe string match in this part is done case-sensitive.

       [1m-t     [22mLeading and trailing spaces are not removed from [4mVALUE[24m.  The op‚Äê
              tional single space after [4mop[24m is here required.

       The filter options concatenate several specifications for a  filter  of
       the same type.  For example the four options in this example:

                 --import-filter keep-uid="uid =~ Alfa"
                 --import-filter keep-uid="&& uid !~ Test"
                 --import-filter keep-uid="|| uid =~ Alpha"
                 --import-filter keep-uid="uid !~ Test"

       which is equivalent to

                 --import-filter \
                  keep-uid="uid =~ Alfa" && uid !~ Test" || uid =~ Alpha" && "uid !~ Test"

       imports  only  the  user  ids of a key containing the strings "Alfa" or
       "Alpha" but not the string "test".

[1mTRUST VALUES[0m
       Trust values are used to indicate ownertrust and validity of  keys  and
       user IDs.  They are displayed with letters or strings:

       [1m-[0m
       [1munknown[0m
              No ownertrust assigned / not yet calculated.

       [1me[0m
       [1mexpired[0m

              Trust calculation has failed; probably due to an expired key.

       [1mq[0m
       [1mundefined, undef[0m
              Not enough information for calculation.

       [1mn[0m
       [1mnever  [22mNever trust this key.

       [1mm[0m
       [1mmarginal[0m
              Marginally trusted.

       [1mf[0m
       [1mfull   [22mFully trusted.

       [1mu[0m
       [1multimate[0m
              Ultimately trusted.

       [1mr[0m
       [1mrevoked[0m
              For validity only: the key or the user ID has been revoked.

       [1m?[0m
       [1merr    [22mThe program encountered an unknown trust value.

[1mFILES[0m
       There are a few configuration files to control certain aspects of [1mgpg[22m's
       operation.  Unless  noted, they are expected in the current home direc‚Äê
       tory (see: [option --homedir]).

       [1mgpg.conf[0m
              This is the standard configuration file read by [1mgpg [22mon  startup.
              It may contain any valid long option; the leading two dashes may
              not  be entered and the option may not be abbreviated.  This de‚Äê
              fault name may be changed on the command line (see:  [gpg-option
              --options]).  You should backup this file.

       [1mcommon.conf[0m
              This  is  an optional configuration file read by [1mgpg [22mon startup.
              It may contain options pertaining to all  components  of  GnuPG.
              Its  current  main  use is for the "use-keyboxd" option.  If the
              default home directory ‚Äò[4m~/.gnupg[24m‚Äô does not exist, GnuPG  creates
              this directory and a ‚Äò[4mcommon.conf[24m‚Äô file with "use_keyboxd".

       Note that on larger installations, it is useful to put predefined files
       into the directory ‚Äò[4m/etc/skel/.gnupg[24m‚Äô so that newly created users start
       up  with  a  working  configuration.  For existing users a small helper
       script is provided to create these files (see: [addgnupghome]).

       For internal purposes [1mgpg [22mcreates and maintains a few other files; They
       all live in the current home directory (see: [option --homedir]).  Only
       the [1mgpg [22mprogram may modify these files.

       [1m~/.gnupg[0m
              This is the default home directory which is used if neither  the
              environment  variable  [1mGNUPGHOME  [22mnor  the  option  [1m--homedir [22mis
              given.

       [1m~/.gnupg/pubring.gpg[0m
              The public keyring using a legacy  format.   You  should  backup
              this file.

              If  this  file  is not available, [1mgpg [22mdefaults to the new keybox
              format and creates a file ‚Äò[4mpubring.kbx[24m‚Äô unless that file already
              exists in which case that file will also  be  used  for  OpenPGP
              keys.

              Note  that  in the case that both files, ‚Äò[4mpubring.gpg[24m‚Äô and ‚Äò[4mpub‚Äê[0m
              [4mring.kbx[24m‚Äô exists but the latter has no OpenPGP keys, the  legacy
              file  ‚Äò[4mpubring.gpg[24m‚Äô will be used.  Take care: GnuPG versions be‚Äê
              fore 2.1 will always use the file ‚Äò[4mpubring.gpg[24m‚Äô because they  do
              not  know about the new keybox format. In the case that you have
              to use GnuPG 1.4 to decrypt archived data you should  keep  this
              file.

       [1m~/.gnupg/pubring.gpg.lock[0m
              The lock file for the public keyring.

       [1m~/.gnupg/pubring.kbx[0m
              The  public  keyring  using the new keybox format.  This file is
              shared with [1mgpgsm[22m.  You should backup this file.  See above  for
              the relation between this file and it predecessor.

              To  convert an existing ‚Äò[4mpubring.gpg[24m‚Äô file to the keybox format,
              you first  backup  the  ownertrust  values,  then  rename  ‚Äò[4mpub‚Äê[0m
              [4mring.gpg[24m‚Äô  to  ‚Äò[4mpublickeys.backup[24m‚Äô, so it won‚Äôt be recognized by
              any GnuPG version, run import,  and  finally  restore  the  own‚Äê
              ertrust values:

         $ cd ~/.gnupg
         $ gpg --export-ownertrust >otrust.lst
         $ mv pubring.gpg publickeys.backup
         $ gpg --import-options restore --import publickeys.backup
         $ gpg --import-ownertrust otrust.lst

       [1m~/.gnupg/pubring.kbx.lock[0m
              The lock file for ‚Äò[4mpubring.kbx[24m‚Äô.

       [1m~/.gnupg/secring.gpg[0m
              The  legacy secret keyring as used by GnuPG versions before 2.1.
              It is not used by GnuPG 2.1 and later.  You may want to keep  it
              in case you have to use GnuPG 1.4 to decrypt archived data.

       [1m~/.gnupg/secring.gpg.lock[0m
              The lock file for the legacy secret keyring.

       [1m~/.gnupg/.gpg-v21-migrated[0m
              File indicating that a migration to GnuPG 2.1 has been done.

       [1m~/.gnupg/trustdb.gpg[0m
              The trust database.  There is no need to backup this file; it is
              better  to  backup the ownertrust values (see: [option --export-
              ownertrust]).

       [1m~/.gnupg/trustdb.gpg.lock[0m
              The lock file for the trust database.

       [1m~/.gnupg/random_seed[0m
              A file used to preserve the state of the internal random pool.

       [1m~/.gnupg/openpgp-revocs.d/[0m
              This is the directory where gpg stores pre-generated  revocation
              certificates.   The file name corresponds to the OpenPGP finger‚Äê
              print of the respective key.  It is suggested  to  backup  those
              certificates and if the primary private key is not stored on the
              disk to move them to an external storage device.  Anyone who can
              access these files is able to revoke the corresponding key.  You
              may want to print them out.  You should backup all files in this
              directory and take care to keep this backup closed away.

       Operation is further controlled by a few environment variables:

       [1mHOME   [22mUsed to locate the default home directory.

       [1mGNUPGHOME[0m
              If set directory used instead of "~/.gnupg".

       [1mGPG_AGENT_INFO[0m
              This  variable is obsolete; it was used by GnuPG versions before
              2.1.

       [1mPINENTRY_USER_DATA[0m
              This value is passed via gpg-agent to pinentry.  It is useful to
              convey extra information to a custom pinentry.

       [1mCOLUMNS[0m
       [1mLINES  [22mUsed to size some displays to the full size of the screen.

       [1mLANGUAGE[0m
              Apart from its use by GNU, it is used  in  the  W32  version  to
              override  the  language selection done through the Registry.  If
              used and set to a valid and available  language  name  ([4mlangid[24m),
              the    file    with    the    translation    is    loaded   from
              [4mgpgdir[24m/gnupg.nls/[4mlangid[24m.mo.  Here [4mgpgdir[24m is the directory out of
              which the gpg binary has been loaded.  If it can't be loaded the
              Registry is tried and as last resort the native  Windows  locale
              system is used.

       [1mGNUPG_BUILD_ROOT[0m
              This  variable  is  only  used by the regression test suite as a
              helper under operating systems without proper support to  figure
              out the name of a process' text file.

       [1mGNUPG_EXEC_DEBUG_FLAGS[0m
              This  variable allows one to enable diagnostics for process man‚Äê
              agement.  A numeric decimal value is expected.   Bit  0  enables
              general diagnostics, bit 1 enables certain warnings on Windows.

       When  calling  the  gpg-agent  component [1mgpg [22msends a set of environment
       variables to gpg-agent.  The names of these variables can be listed us‚Äê
       ing the command:

           gpg-connect-agent 'getinfo std_env_names' /bye | awk '$1=="D" {print $2}'

[1mNOTES[0m
       [1mgpg [22mis often used as a backend engine by other software.  To help  with
       this a machine interface has been defined to have an unambiguous way to
       do  this.   The  options  [1m--status-fd [22mand [1m--batch [22mare almost always re‚Äê
       quired for this.

   [1mProgrammatic use of GnuPG[0m

       Please consider using GPGME instead of calling [1mgpg [22mdirectly.  GPGME of‚Äê
       fers a stable, backend-independent interface for many cryptographic op‚Äê
       erations.  It supports OpenPGP and S/MIME, and also allows  interaction
       with various GnuPG components.

       GPGME  provides  a  C-API,  and  comes  with  bindings for C++, Qt, and
       Python.  Bindings for other languages are available.

   [1mEphemeral home directories[0m

       Sometimes you want to contain effects of some  operation,  for  example
       you want to import a key to inspect it, but you do not want this key to
       be  added to your keyring.  In earlier versions of GnuPG, it was possi‚Äê
       ble to specify alternate keyring files for both public and secret keys.
       In modern GnuPG versions, however,  we  changed  how  secret  keys  are
       stored  in  order to better protect secret key material, and it was not
       possible to preserve this interface.

       The preferred way to do this is  to  use  ephemeral  home  directories.
       This technique works across all versions of GnuPG.

       Create  a  temporary  directory,  create (or copy) a configuration that
       meets your needs, make [1mgpg [22muse this directory either using the environ‚Äê
       ment variable [4mGNUPGHOME[24m, or the option [1m--homedir[22m.  GPGME supports  this
       too  on  a per-context basis, by modifying the engine info of contexts.
       Now execute whatever operation you like, import and export key material
       as necessary.  Once finished, you can delete the directory.  All  GnuPG
       backend services that were started will detect this and shut down.

   [1mThe quick key manipulation interface[0m

       Recent  versions  of GnuPG have an interface to manipulate keys without
       using the interactive command [1m--edit-key[22m.   This  interface  was  added
       mainly  for  the benefit of GPGME (please consider using GPGME, see the
       manual subsection ``Programmatic use of GnuPG'').   This  interface  is
       described in the subsection ``How to manage your keys''.

   [1mUnattended key generation[0m

       The  command  [1m--generate-key  [22mmay be used along with the option [1m--batch[0m
       for unattended key generation.  This is the most flexible way of gener‚Äê
       ating keys, but it is also the most complex one.   Consider  using  the
       quick  key  manipulation interface described in the previous subsection
       ``The quick key manipulation interface''.

       The parameters for the key are either read from stdin  or  given  as  a
       file  on the command line.  The format of the parameter file is as fol‚Äê
       lows: Text only, line length  is  limited  to  about  1000  characters.
       UTF-8  encoding  must  be  used to specify non-ASCII characters.  Empty
       lines are ignored.  Leading and trailing white  space  is  ignored.   A
       hash  sign  as  the first non white space character indicates a comment
       line.  Control statements are indicated  by  a  leading  percent  sign,
       their arguments are separated by white space from the keyword.  Parame‚Äê
       ters  are  specified  by  a keyword, followed by a colon; arguments are
       separated by white space.  The first parameter must be  ‚ÄòKey-Type‚Äô  but
       control statements may be placed anywhere.  The order of the parameters
       does  not  matter  except for ‚ÄòKey-Type‚Äô.  The parameters are only used
       for the generated keyblock (primary and subkeys); parameters from  pre‚Äê
       vious  sets  are  not  used.  Some syntax checks may be performed.  Key
       commences when either the end of the parameter  file  is  reached,  the
       next  ‚ÄòKey-Type‚Äô  parameter  is  encountered,  or the control statement
       ‚Äò%commit‚Äô is encountered.

       Control statements:

       [1m%echo [4m[22mtext[0m
              Print [4mtext[24m as diagnostic.

       [1m%dry-run[0m
              Suppress actual key generation (useful for syntax checking).

       [1m%commit[0m
              Perform the key generation.  Note that  an  implicit  commit  is
              done at the next  parameter.

       [1m%pubring [4m[22mfilename[0m
              Do not write the key to the default or commandline given keyring
              but  to [4mfilename[24m.  This must be given before the first commit to
              take place, duplicate specification of the same filename is  ig‚Äê
              nored,  the last filename before a commit is used.  The filename
              is used until a new filename is used (at commit points) and  all
              keys  are written to that file. If a new filename is given, this
              file is created (and overwrites an existing one).

              See the previous subsection ``Ephemeral home directories'' for a
              more robust way to contain side-effects.

       [1m%secring [4m[22mfilename[0m
              This option is a no-op for GnuPG 2.1 and later.

              See the previous subsection ``Ephemeral home directories''.

       [1m%ask-passphrase[0m
       [1m%no-ask-passphrase[0m
              This option is a no-op since GnuPG version 2.1.

       [1m%no-protection[0m
              Using this option  allows  the  creation  of  keys  without  any
              passphrase  protection.   This option is mainly intended for re‚Äê
              gression tests.

       [1m%transient-key[0m
              If given the keys are created using a faster and a somewhat less
              secure random number generator.  This option  may  be  used  for
              keys  which  are  only  used for a short time and do not require
              full cryptographic strength.  It takes only effect if  used  to‚Äê
              gether with the control statement ‚Äò%no-protection‚Äô.

       General Parameters:

       [1mKey-Type: [4m[22malgo[0m
              Starts  a  new parameter block by giving the type of the primary
              key. The algorithm must be capable of signing.  This  is  a  re‚Äê
              quired  parameter.  [4malgo[24m may either be an OpenPGP algorithm num‚Äê
              ber or a string with the algorithm name.  The special value ‚Äòde‚Äê
              fault‚Äô may be used for [4malgo[24m to create the default key  type;  in
              this case a ‚ÄòKey-Usage‚Äô shall not be given and ‚Äòdefault‚Äô also be
              used for ‚ÄòSubkey-Type‚Äô.

       [1mKey-Length: [4m[22mnbits[0m
              The  requested length of the generated key in bits.  The default
              is returned by running the command  ‚Äògpg  --gpgconf-list‚Äô.   For
              ECC keys this parameter is ignored.

       [1mKey-Curve: [4m[22mcurve[0m
              The  requested  elliptic  curve of the generated key.  This is a
              required parameter for ECC keys.   It  is  ignored  for  non-ECC
              keys.

       [1mKey-Grip: [4m[22mhexstring[0m
              This  is  optional and used to generate a CSR or certificate for
              an already existing key.  Key-Length will be ignored when given.

       [1mKey-Usage: [4m[22musage-list[0m
              Space or comma delimited list of key usages.  Allowed values are
              ‚Äòencrypt‚Äô, ‚Äòsign‚Äô, and ‚Äòauth‚Äô.  This is used to generate the key
              flags.  Please make sure that the algorithm is capable  of  this
              usage.  Note that OpenPGP requires that all primary keys are ca‚Äê
              pable  of  certification, so no matter what usage is given here,
              the ‚Äòcert‚Äô flag will be on.  If no ‚ÄòKey-Usage‚Äô is specified  and
              the  ‚ÄòKey-Type‚Äô  is  not  ‚Äòdefault‚Äô, all allowed usages for that
              particular algorithm are used; if it is not given but  ‚Äòdefault‚Äô
              is used the usage will be ‚Äòsign‚Äô.

       [1mSubkey-Type: [4m[22malgo[0m
              This  generates  a  secondary  key (subkey).  Currently only one
              subkey can be handled.  See also ‚ÄòKey-Type‚Äô above.

       [1mSubkey-Length: [4m[22mnbits[0m
              Length of the secondary key (subkey) in bits.   The  default  is
              returned by running the command ‚Äògpg --gpgconf-list‚Äô.

       [1mSubkey-Curve: [4m[22mcurve[0m
              Key curve for a subkey; similar to ‚ÄòKey-Curve‚Äô.

       [1mSubkey-Usage: [4m[22musage-list[0m
              Key usage lists for a subkey; similar to ‚ÄòKey-Usage‚Äô.

       [1mPassphrase: [4m[22mstring[0m
              If you want to specify a passphrase for the secret key, enter it
              here.   Default  is  to  use  the  Pinentry  dialog to ask for a
              passphrase.

       [1mName-Real: [4m[22mname[0m
       [1mName-Comment: [4m[22mcomment[0m
       [1mName-Email: [4m[22memail[0m
              The three parts of a user name.  Remember to use UTF-8  encoding
              here.  If you don't give any of them, no user ID is created.

       [1mExpire-Date: [4m[22miso-date[24m|([4mnumber[24m[d|w|m|y])
              Set  the  expiration  date for the key (and the subkey).  It may
              either be entered in ISO date format (e.g. "20000815T145012") or
              as number of days, weeks, month  or  years  after  the  creation
              date.  The special notation "seconds=N" is also allowed to spec‚Äê
              ify  a  number of seconds since creation.  Without a letter days
              are assumed.  Note that there is no check done on  the  overflow
              of  the  type  used  by OpenPGP for timestamps.  Thus you better
              make sure that the given value  make  sense.   Although  OpenPGP
              works  with  time intervals, GnuPG uses an absolute value inter‚Äê
              nally and thus the last year we can represent is 2105.

       [1mCreation-Date: [4m[22miso-date[0m
              Set the creation date of the key as stored in the  key  informa‚Äê
              tion and which is also part of the fingerprint calculation.  Ei‚Äê
              ther   a  date  like  "1986-04-26"  or  a  full  timestamp  like
              "19860426T042640" may be used.  The time  is  considered  to  be
              UTC.   The  special notation "seconds=N" may be used to directly
              specify a the number of seconds since Epoch (Unix time).  If  it
              is not given the current time is used.

       [1mPreferences: [4m[22mstring[0m
              Set the cipher, hash, and compression preference values for this
              key.   This  expects  the same type of string as the sub-command
              ‚Äòsetpref‚Äô in the [1m--edit-key [22mmenu.

       [1mRevoker: [4m[22malgo[24m:[4mfpr[24m [sensitive]
              Add a designated revoker to the generated key.  Algo is the pub‚Äê
              lic key algorithm of the designated revoker (i.e. RSA=1, DSA=17,
              etc.)  [4mfpr[24m is the fingerprint of the  designated  revoker.   [4mfpr[0m
              may not contain spaces or colons.  The optional ‚Äòsensitive‚Äô flag
              marks  the designated revoker as sensitive information.  Only v4
              and v5 keys may be designated revokers.

       [1mKeyserver: [4m[22mstring[0m
              This is an optional parameter that specifies the preferred  key‚Äê
              server URL for the key.

       [1mHandle: [4m[22mstring[0m
              This  is  an  optional parameter only used with the status lines
              KEY_CREATED and KEY_NOT_CREATED.  [4mstring[24m may be up to 100  char‚Äê
              acters  and  should  not contain spaces.  It is useful for batch
              key generation to associate a key parameter block with a  status
              line.

       Here  is  an example on how to create a key in an ephemeral home direc‚Äê
       tory:
         $ export GNUPGHOME="$(mktemp -d)"
         $ cat >foo <<EOF
              %echo Generating a basic OpenPGP key
              Key-Type: DSA
              Key-Length: 1024
              Subkey-Type: ELG-E
              Subkey-Length: 1024
              Name-Real: Joe Tester
              Name-Comment: with stupid passphrase
              Name-Email: joe@foo.bar
              Expire-Date: 0
              Passphrase: abc
              # Do a commit here, so that we can later print "done" :-)
              %commit
              %echo done
         EOF
         $ gpg --batch --generate-key foo
          [...]
         $ gpg --list-secret-keys
         /tmp/tmp.0NQxB74PEf/pubring.kbx
         -------------------------------
         sec   dsa1024 2016-12-16 [SCA]
               768E895903FC1C44045C8CB95EEBDB71E9E849D0
         uid           [ultimate] Joe Tester (with stupid passphrase) <joe@foo.bar>
         ssb   elg1024 2016-12-16 [E]

       If you want to create a key with the default algorithms you  would  use
       these parameters:
              %echo Generating a default key
              Key-Type: default
              Subkey-Type: default
              Name-Real: Joe Tester
              Name-Comment: with stupid passphrase
              Name-Email: joe@foo.bar
              Expire-Date: 0
              Passphrase: abc
              # Do a commit here, so that we can later print "done" :-)
              %commit
              %echo done

[1mBUGS[0m
       On older systems this program should be installed as setuid(root). This
       is  necessary  to  lock memory pages. Locking memory pages prevents the
       operating  system  from  writing  memory  pages  (which   may   contain
       passphrases or other sensitive material) to disk. If you get no warning
       message  about  insecure  memory your operating system supports locking
       without being root. The program drops root privileges as soon as locked
       memory is allocated.

       Note also that some systems (especially laptops) have  the  ability  to
       ``suspend  to  disk''  (also known as ``safe sleep'' or ``hibernate'').
       This writes all memory to disk before going into a low  power  or  even
       powered off mode.  Unless measures are taken in the operating system to
       protect  the  saved memory, passphrases or other sensitive material may
       be recoverable from it later.

       Before you report a bug  you  should  first  search  the  mailing  list
       archives  for  similar problems and second check whether such a bug has
       already been reported to our bug tracker at [1mhttps://bugs.gnupg.org[22m.

[1mSEE ALSO[0m
       [1mgpgv[22m(1), [1mgpgsm[22m(1), [1mgpg-agent[22m(1)

       The full documentation for this tool is maintained as a Texinfo manual.
       If GnuPG and the info program are properly installed at your site,  the
       command

         info gnupg

       should  give  you access to the complete manual including a menu struc‚Äê
       ture and an index.

GnuPG 2.4.4                       2024-01-25                            [4mGPG[24m(1)
